// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_motionrequest.proto

/* eslint-disable */
import { type Orientation3d, type StatePoint, type Timestamp, type Vector3d } from "./osi_common";
import { type InterfaceVersion } from "./osi_version";

/**
 * \brief This message is intended as an interface between a
 * motion-planning function and the actuator management.
 * The motion-planning function can thereby be a representation of a
 * highly-automated driving function, a human driving behavior model, etc.
 *
 * The motion-planning function can either send a desired future trajectory or a desired
 * future state. The message can be defined by an additional variable.
 *
 * \note The coordinate system is defined as right-handed.
 * All coordinates and orientations are relative to the global coordinate system.
 * The reference point of the vehicle is the middle of the rear axis.
 * Units are m for positions, m/s for velocities, and m/s^2 for accelerations.
 */
export interface MotionRequest {
  /**
   * The interface version used by the sender (simulation environment).
   *
   * \rules
   * is_set
   * \endrules
   */
  version?:
    | InterfaceVersion
    | undefined;
  /**
   * The data timestamp of the simulation environment.
   * A reference to \c Timestamp message.
   *
   * \rules
   * is_set
   * \endrules
   */
  timestamp?:
    | Timestamp
    | undefined;
  /**
   * Define the type that is used to specify the motion request.
   * This must be set. Additionally, the field corresponding to the specified
   * option must be set.
   */
  motion_request_type?:
    | MotionRequest_MotionRequestType
    | undefined;
  /**
   * Defines a desired state.
   * If the output option is set to DESIRED_STATE, this field must be set.
   */
  desired_state?:
    | MotionRequest_DesiredState
    | undefined;
  /**
   * Defines a desired trajectory.
   * If the output option is set to DESIRED_TRAJECTORY, this field must be set.
   */
  desired_trajectory?: MotionRequest_DesiredTrajectory | undefined;
}

/**
 * Define different options for function output.
 * Each option corresponds to a field in the message.
 */
export enum MotionRequest_MotionRequestType {
  /** DESIRED_STATE - Desired state calculated by the function. */
  DESIRED_STATE = 0,
  /** TRAJECTORY - Desired trajectory calculated by the function. */
  TRAJECTORY = 1,
}

/**
 * \brief The desired state is calculated by the function as a result of
 * the motion planning stack.
 *
 * The actuator management is supposed to reach the desired state at the
 * specified time.
 */
export interface MotionRequest_DesiredState {
  /** A reference to \c Timestamp message. */
  timestamp?:
    | Timestamp
    | undefined;
  /** Intended position to be reached in in x-, y-, and z-direction. */
  position?:
    | Vector3d
    | undefined;
  /** Intended orientation to be reached containing yaw, pitch and roll angle. */
  orientation?:
    | Orientation3d
    | undefined;
  /**
   * Intended velocity to be reached in in x-, y-, and z-direction.
   *
   * Unit: m/s
   */
  velocity?:
    | Vector3d
    | undefined;
  /**
   * Intended acceleration to be reached in x-, y-, and z-direction.
   *
   * Unit: m/s^2
   */
  acceleration?: Vector3d | undefined;
}

/**
 * \brief Defined trajectory desired by the function.
 *
 * This trajectory is the result of the trajectory planning step in the function.
 * The task of the actuator management is to follow this trajectory as closely as possible.
 * The timestamps inside the trajectory must be defined in global simulation time.
 *
 * \note The trajectory is kept as a separate message for future extensions.
 */
export interface MotionRequest_DesiredTrajectory {
  /**
   * The trajectory consists of intended position (x, y, and z) and
   * orientation (yaw, pitch and roll) of intended state to be reached.
   * A reference to \c StatePoint message.
   *
   * \note The position within the trajectory point references to the
   * middle point of the rear axis.
   */
  trajectory_point?: StatePoint[] | undefined;
}
