// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_groundtruth.proto

/* eslint-disable */
import { type Identifier, type Timestamp, type Vector3d } from "./osi_common";
import { type EnvironmentalConditions } from "./osi_environment";
import { type Lane, type LaneBoundary } from "./osi_lane";
import { type LogicalLane, type LogicalLaneBoundary } from "./osi_logicallane";
import { type MovingObject, type StationaryObject } from "./osi_object";
import { type Occupant } from "./osi_occupant";
import { type ReferenceLine } from "./osi_referenceline";
import { type RoadMarking } from "./osi_roadmarking";
import { type TrafficLight } from "./osi_trafficlight";
import { type TrafficSign } from "./osi_trafficsign";
import { type InterfaceVersion } from "./osi_version";

/**
 * \brief The ground truth information from the simulation environment.
 *
 * This ground truth information is supposed to describe the whole simulated
 * environment around any simulated vehicle. For each simulated host vehicle
 * (there may be one or multiple), define an area around the vehicle which
 * is greater than the combined field of views (FOV) of all obstructed sensors
 * in the vehicle. The ground truth data is supposed to describe the convex
 * hull of all such areas w.r.t. a global simulation coordinate system.
 *
 * The simulation coordinate system may change during the simulation if and
 * only if all coordinates w.r.t. this coordinate system are also changed.
 *
 * The data has to be sent at a rate defined by the receiving partner. When
 * sending, values with default values might be left default in order to improve
 * performance.
 *
 * To provide a complete interface, all fields of all contained messages must be
 * properly set unless specifically stated in the field's definition that the
 * field may remain unset.
 *
 * In enums (e.g. types) the unknown (first / default) value is not allowed to
 * be used in the ground truth interface.
 *
 * \image html OSI_GroundTruth.svg "Ground Truth"
 */
export interface GroundTruth {
  /**
   * The interface version used by the sender (i.e. the simulation
   * environment).
   *
   * \rules
   * is_set
   * \endrules
   */
  version?:
    | InterfaceVersion
    | undefined;
  /**
   * The data timestamp of the simulation environment. The zero time point is
   * arbitrary but must be identical for all messages.
   * Recommendation: Zero time point for start point of the simulation.
   *
   * \note Zero time point does not need to coincide with the UNIX epoch.
   *
   * \note For ground truth data this timestamp coincides both with the
   * notional simulation time the data applies to and the time it was sent
   * (there is no inherent latency for ground truth data, as opposed to
   * sensor data).
   *
   * \rules
   * is_set
   * \endrules
   */
  timestamp?:
    | Timestamp
    | undefined;
  /**
   * The ID of the host vehicle object referencing to \c MovingObject .
   *
   * \note This ID has to be filled and is not optional!
   *
   * \rules
   * refers_to: MovingObject
   * is_set
   * \endrules
   */
  host_vehicle_id?:
    | Identifier
    | undefined;
  /**
   * The list of stationary objects (excluding traffic signs and traffic
   * lights).
   */
  stationary_object?:
    | StationaryObject[]
    | undefined;
  /** The list of all other moving objects including all (host) vehicles. */
  moving_object?:
    | MovingObject[]
    | undefined;
  /** The list of traffic signs. */
  traffic_sign?:
    | TrafficSign[]
    | undefined;
  /** The list of traffic lights. */
  traffic_light?:
    | TrafficLight[]
    | undefined;
  /**
   * The list of road surface markings (lane markings are excluded and
   * defined as \c LaneBoundary).
   */
  road_marking?:
    | RoadMarking[]
    | undefined;
  /** The list of lane boundaries. */
  lane_boundary?:
    | LaneBoundary[]
    | undefined;
  /** The list of lanes forming a road network. */
  lane?:
    | Lane[]
    | undefined;
  /** The list of passengers in the (host) vehicle(s). */
  occupant?:
    | Occupant[]
    | undefined;
  /** Conditions of the environment. */
  environmental_conditions?:
    | EnvironmentalConditions
    | undefined;
  /**
   * The ISO country code in 3 digit numeric format according to:
   * ISO Code 3166/1 [1].
   * E.g. Germany = 276, USA = 840.
   *
   * \par Reference:
   * [1] ISO International Organization for Standardization. (2013). <em>ISO 3166-1 Codes for the representation of names of countries and their subdivisions - Part 1: Country codes</em>. (ISO 3166-1:2013). Geneva, Switzerland.
   *
   * \rules
   * is_iso_country_code
   * \endrules
   */
  country_code?:
    | number
    | undefined;
  /**
   * Projection string that allows to transform all coordinates in GroundTruth
   * into a different cartographic projection after the \c proj_frame_offset
   * has been applied.
   *
   * The string follows the PROJ rules for projections [1].
   *
   * \par Reference:
   * [1] PROJ contributors. (2019). <em>PROJ coordinate transformation software library</em>. Open Source Geospatial Foundation. Retrieved January 25, 2019, from https://proj.org/usage/projections.html
   */
  proj_string?:
    | string
    | undefined;
  /**
   * Opaque reference of a map.
   *
   * \note Origin and orientation of the map have to coincide with the
   * inertial coordinate frame of the ground truth.
   *
   * \note It is implementation-specific how map_reference is resolved.
   */
  map_reference?:
    | string
    | undefined;
  /**
   * Opaque reference of an associated 3D model.
   *
   * The model covers the static parts of the environment that are not
   * provided as individual models referenced from ground truth objects
   * like moving or stationary objects.
   *
   * \note Origin and orientation of the model have to coincide with the
   * inertial coordinate frame of the ground truth.
   *
   * \note It is implementation-specific how model_references are resolved to
   * 3d models. The parts the world model contains are also implementation-specific.
   * For example, the world model can either contain street geometries or
   * derives street geometries automatically from a map reference.
   */
  model_reference?:
    | string
    | undefined;
  /** Reference lines used by LogicalLane */
  reference_line?:
    | ReferenceLine[]
    | undefined;
  /** Logical lane boundaries used by LogicalLane */
  logical_lane_boundary?:
    | LogicalLaneBoundary[]
    | undefined;
  /** Logical lanes used e.g. by traffic agents */
  logical_lane?:
    | LogicalLane[]
    | undefined;
  /** Coordinate frame offset to be used for PROJ transformations. */
  proj_frame_offset?: GroundTruth_ProjFrameOffset | undefined;
}

/**
 * \brief Coordinate frame offset to transform from OSI's global coordinate
 * system to a coordinate reference system to be used for given PROJ
 * transformations.
 *
 * If an offset is defined, always apply the \c proj_frame_offset on
 * global OSI coordinates before applying any transformations defined in
 * \c proj_string.
 *
 * To apply the offset, global coordinates are first translated by the given
 * positional offset (x,y,z). Then, the yaw angle is used to rotate around
 * the new origin.
 *
 * The offset is applied on global OSI coordinates using an affine
 * transformation with rotation around z-axis:
 *
 * xWorld = xOSI * cos(yaw) - yOSI * sin(yaw) + xOffset
 *
 * yWorld = xOSI * sin(yaw) + yOSI * cos(yaw) + yOffset
 *
 * zWorld = zOSI + zOffset
 *
 * If no yaw is provided (recommended), the formulas simplify to:
 *
 * xWorld = xOSI + xOffset
 *
 * yWorld = yOSI + yOffset
 *
 * zWorld = zOSI + zOffset
 */
export interface GroundTruth_ProjFrameOffset {
  /** Positional offset for relocation of the coordinate frame. */
  position?:
    | Vector3d
    | undefined;
  /**
   * Yaw/heading angle for re-orientation of the coordinate frame around
   * the z-axis.
   */
  yaw?: number | undefined;
}
