// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_sensorview.proto

/* eslint-disable */
import { type Identifier, type MountingPosition, type Timestamp, type Vector3d } from "./osi_common";
import { type GroundTruth } from "./osi_groundtruth";
import { type HostVehicleData } from "./osi_hostvehicledata";
import {
  type CameraSensorViewConfiguration,
  type GenericSensorViewConfiguration,
  type LidarSensorViewConfiguration,
  type RadarSensorViewConfiguration,
  type UltrasonicSensorViewConfiguration,
} from "./osi_sensorviewconfiguration";
import { type InterfaceVersion } from "./osi_version";

/**
 * \brief The sensor view is derived from \c GroundTruth and used as
 * input to sensor models.
 *
 * The sensor view information is supposed to provide input to sensor
 * models for simulation of actual real sensors.
 * All information regarding the environment is given with respect to
 * the virtual sensor coordinate system specified in
 * \c SensorView::mounting_position, except for the individual physical
 * technology-specific data, which is given with respect to the physical
 * sensor coordinate system specified in the corresponding physical sensor's
 * \c #mounting_position, and the \c #global_ground_truth, which is given in
 * global coordinates.
 *
 * When simulating multiple distinct sensors, each sensor can consume an
 * individual copy of the \c SensorView interface. This allows an independent
 * treatment of the sensors.
 *
 * Alternatively combined sensor models can also consume one combined
 * \c SensorView, with either combined or separate \c SensorData outputs,
 * depending on model architecture.
 */
export interface SensorView {
  /**
   * The interface version used by the sender (simulation environment).
   *
   * \rules
   * is_set
   * \endrules
   */
  version?:
    | InterfaceVersion
    | undefined;
  /**
   * The data timestamp of the simulation environment. Zero time is arbitrary
   * but must be identical for all messages. Zero time does not need to
   * coincide with the UNIX epoch. Recommended is the starting time point of
   * the simulation.
   *
   * \note For sensor view data this timestamp coincides both with the
   * notional simulation time the data applies to and the time it was sent
   * (there is no inherent latency for sensor view data, as opposed to
   * sensor data).
   *
   * \rules
   * is_set
   * \endrules
   */
  timestamp?:
    | Timestamp
    | undefined;
  /**
   * The ID of the sensor at host vehicle's \c #mounting_position.
   *
   * This is the ID of the virtual sensor, to be used in its detected
   * object output; it is distinct from the IDs of its physical detectors,
   * which are used in the detected features.
   *
   * \rules
   * is_set
   * \endrules
   */
  sensor_id?:
    | Identifier
    | undefined;
  /**
   * The virtual mounting position of the sensor (origin and orientation of
   * the sensor frame). Both origin and orientation are given in and with
   * respect to the host vehicle coordinate system [1].
   *
   * The virtual position pertains to the sensor as a whole, regardless of the
   * actual position of individual physical detectors, and governs the
   * sensor-relative coordinates in detected objects of the sensor as a whole.
   * Individual features detected by individual physical detectors are
   * governed by the actual physical mounting positions of the detectors, as
   * indicated in the technology-specific sub-views and sub-view
   * configurations.
   *
   * \arg \b x-direction of sensor coordinate system: sensor viewing direction
   * \arg \b z-direction of sensor coordinate system: sensor (up)
   * \arg \b y-direction of sensor coordinate system: perpendicular to x and z
   * right hand system
   *
   * \par Reference:
   * [1] DIN Deutsches Institut fuer Normung e. V. (2013). <em>DIN ISO 8855 Strassenfahrzeuge - Fahrzeugdynamik und Fahrverhalten - Begriffe</em>. (DIN ISO 8855:2013-11). Berlin, Germany.
   *
   * \note This field is usually static during the simulation.
   * \note The origin of vehicle's coordinate system in world frame is
   * ( \c MovingObject::base . \c BaseMoving::position +
   * Inverse_Rotation_yaw_pitch_roll( \c MovingObject::base . \c
   * BaseMoving::orientation) * \c
   * MovingObject::VehicleAttributes::bbcenter_to_rear) . The orientation of
   * the vehicle's coordinate system is equal to the orientation of the
   * vehicle's bounding box \c MovingObject::base . \c
   * BaseMoving::orientation.
   *
   * \rules
   * is_set
   * \endrules
   */
  mounting_position?:
    | MountingPosition
    | undefined;
  /** The root mean squared error of the mounting position. */
  mounting_position_rmse?:
    | MountingPosition
    | undefined;
  /**
   * Host vehicle data.
   *
   * Host vehicle data is data that the host vehicle knows about itself,
   * e.g. from location sensors, internal sensors and ECU bus data, etc.,
   * that is made available to sensors as input.
   */
  host_vehicle_data?:
    | HostVehicleData
    | undefined;
  /**
   * Ground truth w.r.t. global coordinate system.
   *
   * This is the ground truth that is provided to the sensor model by the
   * simulation environment. It may be filtered as per the requirements of
   * the sensor model as expressed by the \c SensorViewConfiguration
   * message(s) that where exchanged during the simulation initialization
   * phase.
   *
   * \note The host vehicle is always contained in the ground truth provided,
   * regardless of any filtering. The ground truth MUST contain at least as
   * much of the ground truth data, as is requested by the sensor model, but
   * MAY always contain more data, since the filtering is intended only as
   * an optimization mechanism, not as a replacement of a proper sensor
   * field of view modeling.
   */
  global_ground_truth?:
    | GroundTruth
    | undefined;
  /**
   * The ID of the host vehicle in the \c #global_ground_truth data.
   *
   * \rules
   * refers_to: 'MovingObject'
   * is_set
   * \endrules
   */
  host_vehicle_id?:
    | Identifier
    | undefined;
  /** Generic SensorView(s). */
  generic_sensor_view?:
    | GenericSensorView[]
    | undefined;
  /** Radar-specific SensorView(s). */
  radar_sensor_view?:
    | RadarSensorView[]
    | undefined;
  /** Lidar-specific SensorView(s). */
  lidar_sensor_view?:
    | LidarSensorView[]
    | undefined;
  /** Camera-specific SensorView(s). */
  camera_sensor_view?:
    | CameraSensorView[]
    | undefined;
  /** Ultrasonic-specific SensorView(s). */
  ultrasonic_sensor_view?: UltrasonicSensorView[] | undefined;
}

/**
 * \brief Definition of the generic sensor view.
 *
 * Generic sensor view data.
 */
export interface GenericSensorView {
  /** Generic view configuration valid at the time the data was created. */
  view_configuration?: GenericSensorViewConfiguration | undefined;
}

/**
 * \brief Definition of the radar sensor view.
 *
 * Radar specific sensor view data.
 */
export interface RadarSensorView {
  /** Radar view configuration valid at the time the data was created. */
  view_configuration?:
    | RadarSensorViewConfiguration
    | undefined;
  /**
   * Ray tracing data.
   *
   * This field includes one entry for each ray, in left-to-right,
   * top-to-bottom order (think of scan lines in a TV).
   */
  reflection?: RadarSensorView_Reflection[] | undefined;
}

/** \brief Definition of the radar reflection. */
export interface RadarSensorView_Reflection {
  /**
   * Relative signal level of the reflection.
   *
   * This takes the combined antenna diagram (losses in TX and RX)
   * as well as the signal losses due to scattering and absorption
   * into account, and will, when multiplied by TX power yield the
   * actual RX power.
   *
   * Unit: dB
   */
  signal_strength?:
    | number
    | undefined;
  /**
   * Time of flight.
   *
   * This is the time of flight of the reflection, which is directly
   * proportional to the distance traveled.
   *
   * Unit: s
   */
  time_of_flight?:
    | number
    | undefined;
  /**
   * Doppler shift.
   *
   * Shift in frequency based on the specified TX frequency.
   *
   * Unit: Hz
   */
  doppler_shift?:
    | number
    | undefined;
  /**
   * TX horizontal angle (azimuth).
   *
   * Horizontal angle of incidence of the source of the reflection
   * at the TX antenna.
   *
   * Unit: rad
   */
  source_horizontal_angle?:
    | number
    | undefined;
  /**
   * TX vertical angle (elevation).
   *
   * Vertical angle of incidence of the source of the reflection
   * at the TX antenna.
   *
   * Unit: rad
   */
  source_vertical_angle?: number | undefined;
}

/**
 * \brief Definition of the lidar sensor view.
 *
 * Lidar specific sensor view data.
 */
export interface LidarSensorView {
  /** Lidar view configuration valid at the time the data was created. */
  view_configuration?:
    | LidarSensorViewConfiguration
    | undefined;
  /**
   * Ray tracing data.
   *
   * This field includes one entry for each ray, in left-to-right,
   * top-to-bottom order (think of scan lines in a TV).
   */
  reflection?: LidarSensorView_Reflection[] | undefined;
}

/** \brief Definition of the lidar reflection. */
export interface LidarSensorView_Reflection {
  /**
   * Relative signal level of the reflection.
   *
   * This takes the signal losses due to scattering and absorption
   * into account, and will, when multiplied by TX power yield the
   * potential RX power (disregarding any other RX/TX losses).
   *
   * Unit: dB
   */
  signal_strength?:
    | number
    | undefined;
  /**
   * Time of flight.
   *
   * This is the time of flight of the reflection, which is directly
   * proportional to the distance traveled.
   *
   * Unit: s
   */
  time_of_flight?:
    | number
    | undefined;
  /**
   * Doppler shift.
   *
   * Shift in frequency based on the specified TX frequency.
   *
   * Unit: Hz
   */
  doppler_shift?:
    | number
    | undefined;
  /**
   * normal to surface angle.
   *
   * The normal of the transmitted beam to the object, road marking, etc.
   * encounter. \note data is in Lidar coordinate system
   *
   * Unit: unit vector
   */
  normal_to_surface?:
    | Vector3d
    | undefined;
  /**
   * ID of the detected object this reflection is associated to.
   * can be used for ray tracing debug
   *
   * \note ID = MAX(uint64) indicates no reference to an object.
   */
  object_id?: Identifier | undefined;
}

/**
 * \brief Definition of the camera sensor view.
 *
 * Camera specific sensor view data.
 */
export interface CameraSensorView {
  /** Camera view configuration valid at the time the data was created. */
  view_configuration?:
    | CameraSensorViewConfiguration
    | undefined;
  /**
   * Raw image data.
   *
   * The raw image data in the memory layout specified by the camera
   * sensor input configuration. The pixel order is specified in
   * CameraSensorViewConfiguration.pixel_order with the
   * default value PIXEL_ORDER_DEFAULT (i.e. left-to-right, top-to-bottom).
   */
  image_data?: Uint8Array | undefined;
}

/**
 * \brief Definition of the ultrasonic sensor view.
 *
 * Ultrasonic specific sensor view data.
 */
export interface UltrasonicSensorView {
  /** Ultrasonic view configuration valid at the time the data was created. */
  view_configuration?: UltrasonicSensorViewConfiguration | undefined;
}
