// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_detectedtrafficlight.proto

/* eslint-disable */
import { type BaseStationary, type ColorDescription } from "./osi_common";
import { type DetectedItemHeader } from "./osi_detectedobject";
import { type TrafficLight_Classification } from "./osi_trafficlight";

/**
 * \brief A traffic light in the environment as detected by the sensor.
 *
 * \image html OSI_DetectedTrafficLight.svg
 *
 * One detected traffic light message defines a single 'bulb' and not a box of
 * several bulbs, e.g. red, yellow, green are three separate detected traffic
 * lights.
 *
 * The parent frame of a detected traffic light is the virtual sensor coordinate
 * system.
 *
 * /note The virtual sensor coordinate system is relative to the vehicle coordinate
 * system which has its origin in the center of the rear axle of the ego
 * vehicle. This means if virtual sensor mounting position and orientation are
 * set to (0,0,0) the virtual sensor coordinate system coincides with the
 * vehicle coordinate system.
 */
export interface DetectedTrafficLight {
  /** Common information of one detected item. */
  header?:
    | DetectedItemHeader
    | undefined;
  /**
   * The base parameters of the traffic light.
   *
   * \c BaseStationary::orientation x-axis is view normal of the traffic
   * light's icon.
   */
  base?:
    | BaseStationary
    | undefined;
  /**
   * The root mean squared error of the base parameters of the detected
   * traffic light's geometry. \c TrafficLight::base has to be identical
   * for all \c #candidate traffic lights.
   */
  base_rmse?:
    | BaseStationary
    | undefined;
  /**
   * A list of candidates for this traffic light as estimated by the
   * sensor.
   */
  candidate?:
    | DetectedTrafficLight_CandidateTrafficLight[]
    | undefined;
  /**
   * The visual color of the traffic light.
   *
   * \note This does not represent the semantic classification but the visual
   * appearance.  For semantic classification of the traffic light use the color
   * field in \c CandidateTrafficLight::classification.
   */
  color_description?: ColorDescription | undefined;
}

/**
 * \brief A candidate for a detected traffic light as estimated by
 * the sensor.
 */
export interface DetectedTrafficLight_CandidateTrafficLight {
  /**
   * The estimated probability that this candidate is the true value.
   *
   * \note The sum of all \c #probability must be one. This probability is
   * given under the condition of
   * \c DetectedItemHeader::existence_probability.
   *
   * \rules
   * is_less_than_or_equal_to: 1
   * is_greater_than_or_equal_to: 0
   * \endrules
   */
  probability?:
    | number
    | undefined;
  /**
   * The classification of one traffic light that define this candidate.
   *
   * \note IDs, which are referenced in this message, usually
   * reference to \c DetectedXXX::tracking_id IDs.
   */
  classification?: TrafficLight_Classification | undefined;
}
