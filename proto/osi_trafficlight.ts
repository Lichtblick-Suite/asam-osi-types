// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_trafficlight.proto

/* eslint-disable */
import {
  type BaseStationary,
  type ColorDescription,
  type ExternalReference,
  type Identifier,
  type LogicalLaneAssignment,
} from "./osi_common";

/**
 * \brief A traffic light.
 *
 * \image html OSI_TrafficLight.svg
 *
 * One traffic light message defines a single 'bulb' and not a box of several
 * bulbs, e.g. red, yellow, green are three separate traffic lights.
 */
export interface TrafficLight {
  /**
   * The ID of the traffic light.
   *
   * \rules
   * is_globally_unique
   * is_set
   * \endrules
   */
  id?:
    | Identifier
    | undefined;
  /**
   * The base parameters of the traffic light.
   *
   * \c BaseStationary::orientation x-axis is view normal of the traffic
   * light's icon.
   */
  base?:
    | BaseStationary
    | undefined;
  /** The classification data for the traffic light. */
  classification?:
    | TrafficLight_Classification
    | undefined;
  /**
   * Opaque reference of an associated 3D model of the traffic light.
   *
   * \note It is implementation-specific how model_references are resolved to
   * 3d models.
   */
  model_reference?:
    | string
    | undefined;
  /**
   * Optional external reference to the traffic light source.
   *
   * The external reference points to the source of the traffic light, if it
   * is derived from one or more objects or external references.
   *
   * For example, to reference a signal defined in an OpenDRIVE map
   * the items should be set as follows:
   * * reference = URI to map, can remain empty if identical with definition
   *               in \c GroundTruth::map_reference
   * * type = "net.asam.opendrive"
   * * identifier[0] = id of t_road_signals_signal
   *
   * \note For non-ASAM Standards, it is implementation-specific how
   *       source_reference is resolved.
   *
   * \note The value has to be repeated, because one lane segment may be
   *       derived from more than one origin segment. Multiple sources
   *       may be added as reference as well, for example, a map and sensors.
   */
  source_reference?:
    | ExternalReference[]
    | undefined;
  /**
   * The visual color of the traffic light.
   *
   * \note This does not represent the semantic classification but the visual
   * appearance.  For semantic classification of the traffic light use the color
   * field in \c Classification.
   */
  color_description?: ColorDescription | undefined;
}

/** \brief \c Classification data for a traffic light. */
export interface TrafficLight_Classification {
  /**
   * The semantic color of the traffic light.
   *
   * \note The color types represent the semantic color classification of a
   * traffic light only. They do not represent an actual visual appearance.
   *
   * \note If the color of the traffic light is known (from history or
   * geometrical arrangement) and the state \c #mode is
   * \c #MODE_OFF then \c #color could remain unchanged.
   * If traffic light displays images in different colors and traffic
   * light is off ( \c #mode =  \c #MODE_OFF), then \c #color = \c
   * #COLOR_OTHER .
   */
  color?:
    | TrafficLight_Classification_Color
    | undefined;
  /** The icon of the traffic light. */
  icon?:
    | TrafficLight_Classification_Icon
    | undefined;
  /** The operating mode of the traffic light. */
  mode?:
    | TrafficLight_Classification_Mode
    | undefined;
  /**
   * The value of the countdown counter.
   * Unit: % or s
   *
   * \note Set value only if traffic light bulb is a countdown counter.
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * \endrules
   */
  counter?:
    | number
    | undefined;
  /**
   * The IDs of the lanes that the traffic light is assigned to.
   * Might be multiple if the traffic light is valid for multiple driving
   * lanes.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   *
   * \rules
   * refers_to: Lane
   * \endrules
   */
  assigned_lane_id?:
    | Identifier[]
    | undefined;
  /**
   * Boolean flag to indicate that the traffic light is taken out of service.
   * This can be achieved by visibly crossing the light, covering it completely
   * or switching the traffic light off.
   */
  is_out_of_service?:
    | boolean
    | undefined;
  /**
   * Assignment of this object to logical lanes.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  logical_lane_assignment?: LogicalLaneAssignment[] | undefined;
}

/**
 * Definition of semantic colors for traffic lights.
 *
 * \note The color types represent the semantic classification of a traffic light
 * only. They do not represent an actual visual appearance.
 */
export enum TrafficLight_Classification_Color {
  /** UNKNOWN - Color is unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) color. */
  OTHER = 1,
  /** RED - Red light. */
  RED = 2,
  /** YELLOW - Orange-yellow light. */
  YELLOW = 3,
  /** GREEN - Green light. */
  GREEN = 4,
  /** BLUE - Blue light. */
  BLUE = 5,
  /** WHITE - White light. */
  WHITE = 6,
}

/** Definition of traffic light bulb icon. */
export enum TrafficLight_Classification_Icon {
  /** UNKNOWN - Unknown icon of traffic light (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) icon of traffic light. */
  OTHER = 1,
  /**
   * NONE - This is a normal traffic light without specification of e.g.
   * direction.
   */
  NONE = 2,
  /** ARROW_STRAIGHT_AHEAD - This traffic light applies to the lane straight ahead. */
  ARROW_STRAIGHT_AHEAD = 3,
  /** ARROW_LEFT - This traffic light applies to left turns. */
  ARROW_LEFT = 4,
  /** ARROW_DIAG_LEFT - This traffic light applies to diagonal left turns. */
  ARROW_DIAG_LEFT = 5,
  /**
   * ARROW_STRAIGHT_AHEAD_LEFT - This traffic light applies to a lane allowing to drive straight
   * ahead or to turn left.
   */
  ARROW_STRAIGHT_AHEAD_LEFT = 6,
  /** ARROW_RIGHT - This traffic light applies to right turns. */
  ARROW_RIGHT = 7,
  /** ARROW_DIAG_RIGHT - This traffic light applies to diagonal right turns. */
  ARROW_DIAG_RIGHT = 8,
  /**
   * ARROW_STRAIGHT_AHEAD_RIGHT - This traffic light applies to a lane allowing to drive straight
   * ahead or to turn right.
   */
  ARROW_STRAIGHT_AHEAD_RIGHT = 9,
  /**
   * ARROW_LEFT_RIGHT - This traffic light applies to a lane allowing to turn left or
   * right.
   */
  ARROW_LEFT_RIGHT = 10,
  /**
   * ARROW_DOWN - This traffic light indicates that the assigned lane is open for
   * driving.
   */
  ARROW_DOWN = 11,
  /**
   * ARROW_DOWN_LEFT - This traffic light indicates a necessary lane change to the left
   * ahead.
   */
  ARROW_DOWN_LEFT = 12,
  /**
   * ARROW_DOWN_RIGHT - This traffic light indicates a necessary lane change to the right
   * ahead.
   */
  ARROW_DOWN_RIGHT = 13,
  /**
   * ARROW_CROSS - This traffic light indicates that the assigned lane is not open
   * for driving.
   */
  ARROW_CROSS = 14,
  /** PEDESTRIAN - This traffic light is valid for pedestrians. */
  PEDESTRIAN = 15,
  /** WALK - This traffic light is valid for pedestrians with letters 'walk'. */
  WALK = 16,
  /**
   * DONT_WALK - This traffic light is valid for pedestrians with letters 'don't
   * walk'.
   */
  DONT_WALK = 17,
  /** BICYCLE - This traffic light is valid for bicyclists. */
  BICYCLE = 18,
  /** PEDESTRIAN_AND_BICYCLE - This traffic light is valid for pedestrians and bicyclists. */
  PEDESTRIAN_AND_BICYCLE = 19,
  /** COUNTDOWN_SECONDS - This traffic light counter in second. */
  COUNTDOWN_SECONDS = 20,
  /** COUNTDOWN_PERCENT - This traffic light counter in percent. */
  COUNTDOWN_PERCENT = 21,
  /**
   * TRAM - This traffic light is valid for
   * trams.
   *
   * \note There is no detailed traffic light specification for trams
   * and buses at the moment.
   */
  TRAM = 22,
  /**
   * BUS - This traffic light is valid for
   * buses.
   *
   * \note There is no detailed traffic light specification for trams
   * and buses at the moment.
   */
  BUS = 23,
  /**
   * BUS_AND_TRAM - This traffic light is valid for
   * buses and trams.
   *
   * \note There is no detailed traffic light specification for trams
   * and buses at the moment.
   */
  BUS_AND_TRAM = 24,
}

/** Definition of light modes for traffic lights. */
export enum TrafficLight_Classification_Mode {
  /** UNKNOWN - Mode is unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) mode. */
  OTHER = 1,
  /** OFF - Traffic light is off. */
  OFF = 2,
  /** CONSTANT - Light is on and not flashing. */
  CONSTANT = 3,
  /** FLASHING - Light is flashing. */
  FLASHING = 4,
  /** COUNTING - Light is counting. */
  COUNTING = 5,
}
