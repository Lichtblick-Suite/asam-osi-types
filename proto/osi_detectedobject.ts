// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_detectedobject.proto

/* eslint-disable */
import {
  type BaseMoving,
  type BaseStationary,
  type ColorDescription,
  type Identifier,
  type Orientation3d,
} from "./osi_common";
import {
  type MovingObject_MovingObjectClassification,
  type MovingObject_Type,
  type MovingObject_VehicleClassification,
  type StationaryObject_Classification,
} from "./osi_object";
import {
  type CameraSpecificObjectData,
  type LidarSpecificObjectData,
  type RadarSpecificObjectData,
  type UltrasonicSpecificObjectData,
} from "./osi_sensorspecific";

/**
 * \brief The common information for a detected item as estimated by the
 * sensor.
 */
export interface DetectedItemHeader {
  /**
   * Specific ID of the detected item as assigned by the sensor internally.
   * Needs not to match with \c #ground_truth_id.
   *
   * \rules
   * is_set
   * \endrules
   */
  tracking_id?:
    | Identifier
    | undefined;
  /** The ID of the original detected item in the ground truth. */
  ground_truth_id?:
    | Identifier[]
    | undefined;
  /**
   * The estimated probability that this detected item really exists, not
   * based on history.
   *
   * \note Use as confidence measure where a low value means less confidence
   * and a high value indicates strong confidence.
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * is_less_than_or_equal_to: 1
   * \endrules
   */
  existence_probability?:
    | number
    | undefined;
  /**
   * The amount of time that this detected object has been continuously
   * observed/tracked.
   *
   * \note
   * \f$ Timestamp - Age := \f$ 'point in time' when the object has
   * been observed for the first time.
   *
   * Unit: s
   */
  age?:
    | number
    | undefined;
  /** The measurement state. */
  measurement_state?:
    | DetectedItemHeader_MeasurementState
    | undefined;
  /**
   * A list of physical sensors which detected this detected item.
   *
   * If \c SensorData has detected entities and all detections are missing,
   * then e.g. the number of sensors can confirm the
   * \c #existence_probability.
   *
   * \note This information can be determined via the detected entities'
   * detections ( \c ...Detection::object_id = 'this detected item' ) and
   * the sensors (their IDs) to which these detections belong.
   */
  sensor_id?: Identifier[] | undefined;
}

/** Definition of measurement states. */
export enum DetectedItemHeader_MeasurementState {
  /** UNKNOWN - Measurement state is unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /**
   * OTHER - Measurement state is unspecified (but known, i.e. value is not part
   * of this enum list).
   */
  OTHER = 1,
  /** MEASURED - Entity has been measured by the sensor in the current time step. */
  MEASURED = 2,
  /**
   * PREDICTED - Entity has not been measured by the sensor in the current time step.
   * Values provided by tracking only.
   */
  PREDICTED = 3,
}

/**
 * \brief A stationary object (e.g. landmark) in the environment as detected by
 * the sensor.
 *
 * \image html OSI_DetectedStationaryObject.svg
 *
 * The parent frame of a detected stationary object is the virtual sensor
 * coordinate system.
 *
 * /note The virtual sensor coordinate system is relative to the vehicle coordinate
 * system which has its origin in the center of the rear axle of the ego
 * vehicle. This means if virtual sensor mounting position and orientation are
 * set to (0,0,0) the virtual sensor coordinate system coincides with the
 * vehicle coordinate system.
 */
export interface DetectedStationaryObject {
  /** Common information of one detected item. */
  header?:
    | DetectedItemHeader
    | undefined;
  /** The base parameters of the stationary object. */
  base?:
    | BaseStationary
    | undefined;
  /**
   * The root mean squared error of the base parameters of the detected
   * stationary object (e.g. landmark). \c StationaryObject::base has to be
   * identical for all \c #candidate stationary objects.
   */
  base_rmse?:
    | BaseStationary
    | undefined;
  /**
   * A list of candidates for this stationary object as estimated by the
   * sensor.
   */
  candidate?:
    | DetectedStationaryObject_CandidateStationaryObject[]
    | undefined;
  /** The dominating color of the material of the structure. */
  color_description?:
    | ColorDescription
    | undefined;
  /**
   * Additional data that is specific to radar sensors.
   *
   * \note Field needs not to be set if simulated sensor is not a radar
   * sensor.
   */
  radar_specifics?:
    | RadarSpecificObjectData
    | undefined;
  /**
   * Additional data that is specific to lidar sensors.
   *
   * \note Field needs not to be set if simulated sensor is not a lidar
   * sensor.
   */
  lidar_specifics?:
    | LidarSpecificObjectData
    | undefined;
  /**
   * Additional data that is specific to camera sensors.
   *
   * \note Field needs not to be set if simulated sensor is not a camera
   * sensor.
   */
  camera_specifics?:
    | CameraSpecificObjectData
    | undefined;
  /**
   * Additional data that is specific to ultrasonic sensors.
   *
   * \note Field needs not to be set if simulated sensor is not an ultrasonic
   * sensor.
   */
  ultrasonic_specifics?: UltrasonicSpecificObjectData | undefined;
}

/**
 * \brief A candidate for a detected stationary object as estimated
 * by the sensor.
 */
export interface DetectedStationaryObject_CandidateStationaryObject {
  /**
   * The estimated probability that this candidate is the true value.
   *
   * \note The sum of all \c #probability must be one. This probability is
   * given under the condition of
   * \c DetectedItemHeader::existence_probability.
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * is_less_than_or_equal_to: 1
   * \endrules
   */
  probability?:
    | number
    | undefined;
  /** The classification of the stationary object (e.g. landmark). */
  classification?: StationaryObject_Classification | undefined;
}

/**
 * \brief Moving object in the environment as detected and perceived by the
 * sensor.
 *
 * The parent frame of a detected moving object is the virtual sensor coordinate
 * system.
 *
 * /note The virtual sensor coordinate system is relative to the vehicle coordinate
 * system which has its origin in the center of the rear axle of the ego
 * vehicle. This means if virtual sensor mounting position and orientation are
 * set to (0,0,0) the virtual sensor coordinate system coincides with the
 * vehicle coordinate system.
 */
export interface DetectedMovingObject {
  /** Common information of one detected item. */
  header?:
    | DetectedItemHeader
    | undefined;
  /**
   * The base parameters of the moving object.
   *
   * \note The bounding box does NOT include mirrors for vehicles.
   * \note The height includes the ground_clearance. It always goes from the
   * top to the ground.
   */
  base?:
    | BaseMoving
    | undefined;
  /**
   * The root mean squared error of the base parameters of the detected
   * moving object (e.g. car). \c MovingObject::base has to be
   * identical for all \c #candidate moving objects.
   */
  base_rmse?:
    | BaseMoving
    | undefined;
  /**
   * Reference point location specification of the sensor measurement
   * (required to decouple sensor measurement, position and bounding box
   * estimation) as used by the sensor (model).
   *
   * \note Note that the value of this field has no impact on the value of
   * object::position, which always references the center of the object /
   * bounding box.
   */
  reference_point?:
    | DetectedMovingObject_ReferencePoint
    | undefined;
  /** Actual movement state w.r.t. the moving object history. */
  movement_state?:
    | DetectedMovingObject_MovementState
    | undefined;
  /**
   * Percentage side lane left.
   *
   * Percentage value of the object width in the corresponding lane.
   *
   * \note DEPRECATED: Use assigned_lane_percentage in MovingObjectClassification
   * instead.
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * is_less_than_or_equal_to: 100
   * \endrules
   */
  percentage_side_lane_left?:
    | number
    | undefined;
  /**
   * Percentage side lane right.
   *
   * Percentage value of the object width in the corresponding lane.
   *
   * \note DEPRECATED: Use assigned_lane_percentage in MovingObjectClassification
   * instead.
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * is_less_than_or_equal_to: 100
   * \endrules
   */
  percentage_side_lane_right?:
    | number
    | undefined;
  /**
   * A list of candidates for this moving object as estimated by the
   * sensor (e.g. pedestrian, car).
   */
  candidate?:
    | DetectedMovingObject_CandidateMovingObject[]
    | undefined;
  /** The dominating color of the material of the moving object. */
  color_description?:
    | ColorDescription
    | undefined;
  /**
   * Additional data that is specific to radar sensors.
   *
   * \note Field needs not to be set if simulated sensor is not a radar
   * sensor.
   */
  radar_specifics?:
    | RadarSpecificObjectData
    | undefined;
  /**
   * Additional data that is specific to lidar sensors.
   *
   * \note Field needs not to be set if simulated sensor is not a lidar
   * sensor.
   */
  lidar_specifics?:
    | LidarSpecificObjectData
    | undefined;
  /**
   * Additional data that is specific to camera sensors.
   *
   * \note Field needs not to be set if simulated sensor is not a camera
   * sensor.
   */
  camera_specifics?:
    | CameraSpecificObjectData
    | undefined;
  /**
   * Additional data that is specific to ultrasonic sensors.
   *
   * \note Field needs not to be set if simulated sensor is not an ultrasonic
   * sensor.
   */
  ultrasonic_specifics?: UltrasonicSpecificObjectData | undefined;
}

/**
 * Definition of available reference points. Left/middle/right and
 * front/middle/rear indicate the position in y- and x-direction
 * respectively. The z position is always considered as middle.
 */
export enum DetectedMovingObject_ReferencePoint {
  /**
   * UNKNOWN - Reference point is unknown, i.e. sensor does not report a reference
   * point for the position coordinate.
   * Value must not be used in ground truth data.
   * Usually this means that the reference point for the given position
   * coordinates is a largely arbitrary point within the bounding volume
   * unknown to the sensor. If this value is set, the center of the
   * bounding box should be used as reference point by convention, unless
   * the specific use case requires otherwise.
   */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) reference point. */
  OTHER = 1,
  /** CENTER - Center of the bounding box. */
  CENTER = 2,
  /** MIDDLE_LEFT - Middle-Left of the bounding box. */
  MIDDLE_LEFT = 3,
  /** MIDDLE_RIGHT - Middle-Right of the bounding box. */
  MIDDLE_RIGHT = 4,
  /** REAR_MIDDLE - Rear-Middle of the bounding box. */
  REAR_MIDDLE = 5,
  /** REAR_LEFT - Rear-Left of the bounding box. */
  REAR_LEFT = 6,
  /** REAR_RIGHT - Rear-Right of the bounding box. */
  REAR_RIGHT = 7,
  /** FRONT_MIDDLE - Front-Middle of the bounding box. */
  FRONT_MIDDLE = 8,
  /** FRONT_LEFT - Front-Left of the bounding box. */
  FRONT_LEFT = 9,
  /** FRONT_RIGHT - Front-Right of the bounding box. */
  FRONT_RIGHT = 10,
}

/** Information about a possible movement of the object during tracking. */
export enum DetectedMovingObject_MovementState {
  /** UNKNOWN - Movement state is unknown. */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known). */
  OTHER = 1,
  /** STATIONARY - Until now no object movement was detected in tracking history. */
  STATIONARY = 2,
  /** MOVING - Object moves currently. */
  MOVING = 3,
  /**
   * STOPPED - Object movement was detected in tracking history, but object is
   * currently not moving.
   */
  STOPPED = 4,
}

/**
 * \brief A candidate for a detected moving object as estimated by the
 * sensor.
 */
export interface DetectedMovingObject_CandidateMovingObject {
  /**
   * The estimated probability that this candidate is the true value.
   *
   * \note The sum of all \c #probability must be one. This probability is
   * given under the condition of
   * \c DetectedItemHeader::existence_probability.
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * is_less_than_or_equal_to: 1
   * \endrules
   */
  probability?:
    | number
    | undefined;
  /** The description of the moving object (e.g. car). */
  type?:
    | MovingObject_Type
    | undefined;
  /**
   * Specific information about the classification of the vehicle.
   *
   * \note This field is mandatory if the \c CandidateMovingObject::type
   * is \c MovingObject::TYPE_VEHICLE .
   *
   * \rules
   * check_if this.type is_equal_to 2 else do_check is_set
   * \endrules
   */
  vehicle_classification?:
    | MovingObject_VehicleClassification
    | undefined;
  /**
   * Pedestrian head pose for behavior prediction. Describes the head
   * orientation w.r.t. the host vehicle orientation.
   * The x-axis of the right-handed head frame is pointing along the
   * pedestrian's straight ahead viewing direction (anterior), the y-axis lateral to the left,
   * and the z-axis is pointing upwards (superior) [1].
   *
   * ``View_normal_base_coord_system =
   * Inverse_Rotation(#head_pose)*Unit_vector_x``
   *
   * \note This field is mandatory if the \c CandidateMovingObject.type is
   * \c MovingObject::TYPE_PEDESTRIAN
   *
   * \rules
   * check_if this.type is_equal_to 3 else do_check is_set
   * \endrules
   *
   * \par Reference:
   *
   * [1] Patton, K. T. & Thibodeau, G. A. (2015). <em>Anatomy & Physiology</em>. 9th Edition. Elsevier. Missouri, U.S.A. ISBN 978-0-323-34139-4. p. 1229.
   */
  head_pose?:
    | Orientation3d
    | undefined;
  /**
   * Pedestrian upper body pose for behavior prediction. Describes the
   * upper body orientation w.r.t. the host vehicle orientation.
   * The x-axis of the right-handed upper body frame is pointing along the
   * pedestrian's upper body ventral (anterior) direction (i.e. usually
   * pedestrian's intended moving direction), the y-axis lateral to the left,
   * and the z-axis is pointing upwards (superior, to the pedestrian's head) [1].
   *
   * ``View_normal_base_coord_system =
   * Inverse_Rotation(#upper_body_pose)*Unit_vector_x``
   *
   * \note This field is mandatory if the \c CandidateMovingObject::type
   * is \c MovingObject::TYPE_PEDESTRIAN
   *
   * \rules
   * check_if this.type is_equal_to 3 else do_check is_set
   * \endrules
   *
   * \par Reference:
   * [1] Patton, K. T. & Thibodeau, G. A. (2015). <em>Anatomy & Physiology</em>. 9th Edition. Elsevier. Missouri, U.S.A. ISBN 978-0-323-34139-4. p. 1229.
   */
  upper_body_pose?:
    | Orientation3d
    | undefined;
  /** Specific information about the classification of a moving object. */
  moving_object_classification?: MovingObject_MovingObjectClassification | undefined;
}
