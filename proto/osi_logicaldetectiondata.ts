// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_logicaldetectiondata.proto

/* eslint-disable */
import { type Identifier, type Timestamp, type Vector3d } from "./osi_common";
import { type InterfaceVersion } from "./osi_version";

/** Definition of basic logical detection classifications. */
export enum LogicalDetectionClassification {
  /** UNKNOWN - Logical detection is unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) logical detection. */
  OTHER = 1,
  /**
   * INVALID - Invalid logical detection, not to be used for object tracking, of unspecified
   * type (none of the other types applies).
   */
  INVALID = 2,
  /** CLUTTER - Clutter (noise, spray, rain, fog etc.). */
  CLUTTER = 3,
  /** OVERDRIVABLE - Over-drivable (ground etc.). */
  OVERDRIVABLE = 4,
  /** UNDERDRIVABLE - Under-drivable (sign gantry etc.). */
  UNDERDRIVABLE = 5,
}

/**
 * \brief Processed data from one or multiple sensors as a list of logical detections.
 * Logical detections are derived from sensor detections in a logical model through processing steps like fusion filtering, tracking etc.
 *
 * All information is given with respect to the reference frame of the logical/virtual sensor
 * \c SensorView::mounting_position (e.g. center of rear axle of the ego car) in Cartesian coordinates.
 */
export interface LogicalDetectionData {
  /**
   * The interface version used by the sender (i.e. the simulation
   * environment).
   *
   * \rules
   * is_set
   * \endrules
   */
  version?:
    | InterfaceVersion
    | undefined;
  /** Header attributes of fused detections from multiple sensors and sensor types. */
  header?:
    | LogicalDetectionDataHeader
    | undefined;
  /**
   * Logical detections consisting of transformed (and potentially fused)
   * detections from one or multiple sensors and sensor types.
   *
   * The parent frame of a logical detection is the virtual sensor coordinate
   * system specified by \c SensorView::mounting_position .
   *
   * /note The virtual sensor coordinate system is relative to the vehicle
   * coordinate system which has its origin in the center of the rear axle of
   * the ego vehicle. This means if virtual sensor mounting position and
   * orientation are set to (0,0,0) the virtual sensor coordinate system
   * coincides with the vehicle coordinate system.
   */
  logical_detection?: LogicalDetection[] | undefined;
}

/** \brief The header attributes of each sensor's logical detections list. */
export interface LogicalDetectionDataHeader {
  /**
   * Time stamp at which the transformation and optional fusion was finished in the global synchronized time.
   *
   * \note See \c SensorData::timestamp and
   * \c SensorData::last_measurement_time for detailed discussions on the
   * semantics of time-related fields.
   */
  logical_detection_time?:
    | Timestamp
    | undefined;
  /**
   * Data Qualifier expresses to what extent the content of this event can be
   * relied on.
   */
  data_qualifier?:
    | LogicalDetectionDataHeader_DataQualifier
    | undefined;
  /**
   * The current number of valid detections in the logical detections list.
   *
   * \note This value has to be set if the list contains invalid logical detections.
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * \endrules
   */
  number_of_valid_logical_detections?:
    | number
    | undefined;
  /**
   * The ID(s) of the sensor(s) that produced the detections for transformation
   * and - in case of multiple sensors - fusion into logical detections.
   */
  sensor_id?: Identifier[] | undefined;
}

/**
 * Data qualifier communicates the overall availability of the
 * interface.
 */
export enum LogicalDetectionDataHeader_DataQualifier {
  /** UNKNOWN - Unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known). */
  OTHER = 1,
  /** AVAILABLE - Data is available. */
  AVAILABLE = 2,
  /** AVAILABLE_REDUCED - Reduced data is available. */
  AVAILABLE_REDUCED = 3,
  /** NOT_AVAILABLE - Data is not available. */
  NOT_AVAILABLE = 4,
  /** BLINDNESS - Sensor is blind. */
  BLINDNESS = 5,
  /** TEMPORARY_AVAILABLE - Sensor temporary available. */
  TEMPORARY_AVAILABLE = 6,
  /** INVALID - Sensor invalid. */
  INVALID = 7,
}

/** \brief A logical detection that could be based on multiple sensors and sensor types. */
export interface LogicalDetection {
  /**
   * Existence probability of the logical detection
   *
   * \note Use as confidence measure where a low value means less confidence
   * and a high value indicates strong confidence.
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * is_less_than_or_equal_to: 1
   * \endrules
   */
  existence_probability?:
    | number
    | undefined;
  /**
   * ID of the detected object this logical detection is associated to.
   *
   * \note ID = MAX(uint64) indicates no reference to an object.
   *
   * \rules
   * refers_to: DetectedObject
   * \endrules
   */
  object_id?:
    | Identifier
    | undefined;
  /**
   * Measured position of the logical detection given in cartesian coordinates
   * in the virtual sensor coordinate system.
   *
   * Unit: m
   */
  position?:
    | Vector3d
    | undefined;
  /** Root mean squared error of the measured position of the logical detection. */
  position_rmse?:
    | Vector3d
    | undefined;
  /**
   * Velocity of the logical detection given in cartesian coordinates in the
   * virtual sensor coordinate system.
   *
   * Unit: m/s
   */
  velocity?:
    | Vector3d
    | undefined;
  /**
   * Root mean squared error of the logical detection's velocity.
   *
   * Unit: m/s
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * \endrules
   */
  velocity_rmse?:
    | Vector3d
    | undefined;
  /**
   * Intensity or equivalent value of the logical detection's echo.
   *
   * Unit: %
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * is_less_than_or_equal_to: 100
   * \endrules
   */
  intensity?:
    | number
    | undefined;
  /**
   * The signal to noise ratio (SNR) of the logical detection.
   *
   * Unit: dB
   */
  snr?:
    | number
    | undefined;
  /**
   * Describes the possibility whether more than one object may have led to
   * this logical detection.
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * is_less_than_or_equal_to: 1
   * \endrules
   */
  point_target_probability?:
    | number
    | undefined;
  /**
   * The ID(s) of the sensor(s) that produced the detection(s) for transformation
   * and - in case of multiple sensors - fusion into the single logical detection.
   *
   * \note One logical detection can originate from multiple sensors.
   */
  sensor_id?:
    | Identifier[]
    | undefined;
  /** Basic classification of the logical detection. */
  classification?:
    | LogicalDetectionClassification
    | undefined;
  /**
   * Echo pulse width of the logical detection's echo.
   * Several sensors output an echo pulse width instead of an intensity for each individual detection.
   * The echo pulse is measured in m and measures the extent of the object parts or atmospheric particles that produce the echo.
   * \note For more details see [1] Fig. 7 and 8.
   * \note Fig. 7 shows an example where the two echos are reflected from the edges A-B and C-D.
   * \note Fig. 8 shows how the echo pulse width is measured as the range between the rising edge and the falling edge that crosses the intensity threshold.
   *
   * Unit: m
   *
   * \rules
   * is_greater_than_or_equal_to: 0
   * \endrules
   *
   * \par Reference:
   * [1] Rosenberger, P., Holder, M.F., Cianciaruso, N. et al. (2020). <em>Sequential lidar sensor system simulation: a modular approach for simulation-based safety validation of automated driving</em> Automotive Engine Technology 5, Fig 7, Fig 8. Retrieved May 10, 2021, from https://doi.org/10.1007/s41104-020-00066-x
   */
  echo_pulse_width?: number | undefined;
}
