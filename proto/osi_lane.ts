// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_lane.proto

/* eslint-disable */
import { type Identifier, type Vector3d } from "./osi_common";

/**
 * \brief A lane in the road network.
 *
 * A lane is part of a road and mainly characterized by its center line. It also
 * knows about any adjacent lanes, antecessor and successor lanes.
 * The following images will be referred to by later comments. The lane
 * l4 in image HighwayExit is used  as reference if not mentioned otherwise.
 *
 * <table border=0>
 * <tr>
 * <td>
 * \image html OSI_Highway_Exit.svg "" width=550px
 * <td>
 * \image html OSI_LaneIntersection.svg "" width=550px
 * <tr>
 * <td>
 * \image html OSI_Highway_Exit.jpg "HighwayExit" width=650px
 * <td>
 * \image html OSI_LaneIntersection.jpg "Intersection" width=650px
 * </table>
 *
 * \note In the examples, the symbols l1, l2, ... and lb1, lb2, ...
 * stand for the lane ids and lane boundary ids respectively, i.e. for
 * integers (uint64). The symbols cl1, cl2, ... represent the
 * osi3::Lane::Classification::centerline elements of the lanes with
 * the respective ids.
 */
export interface Lane {
  /**
   * The ID of the lane.
   * Example: l4 (see reference picture HighwayExit).
   *
   * \note Note ID is global unique.
   */
  id?:
    | Identifier
    | undefined;
  /** The classification of the lane. */
  classification?: Lane_Classification | undefined;
}

/**
 * \brief \c Classification of a lane.
 *
 * <table border = 0>
 * <tr>
 * <td>
 * \anchor HighwayExit
 * \image html OSI_LaneClassification.jpg "HighwayExit" width=800px
 * </td>
 * <td>
 * <table border=0>
 * <tr>
 * <td>
 * <b>
 * \c Classification for lane l4 in image HighwayExit:
 * </b>
 * <tr>
 * <td>
 * \c #type = \c #TYPE_DRIVING
 * <tr>
 * <td>
 * \c #centerline = (cl4_1, cl4_2, cl4_3, cl4_4, cl4_5)
 * <tr>
 * <td>
 * \c #centerline_is_driving_direction = \c true
 * <tr>
 * <td>
 * \c #is_host_vehicle_lane = \c true
 * <tr>
 * <td>
 * \c #left_adjacent_lane_id = l3
 * <tr>
 * <td>
 * \c #right_adjacent_lane_id  = (l5,l6)
 * <tr>
 * <td>
 * \c #left_lane_boundary_id = lb5
 * <tr>
 * <td>
 * \c #right_lane_boundary_id = (lb9, lb6)
 * </table>
 * </td>
 * </tr>
 * <tr>
 * <td>
 * \anchor Intersection
 * \image html OSI_LaneIntersection.jpg "Intersection" width=800px
 * </td>
 * <td>
 * <table border=0>
 * <tr>
 * <td>
 * <b>
 * \c Classification for lane l7 in image Intersection:
 * </b>
 * </td>
 * </tr>
 * <tr>
 * <td>
 * \c #type = \c #TYPE_INTERSECTION
 * </td>
 * </tr>
 * <tr>
 * <td>
 * \c #is_host_vehicle_lane = \c false
 * </td>
 * </tr>
 * <tr>
 * <td>
 * \c #free_lane_boundary_id = lb11
 * </td>
 * </tr>
 * <tr>
 * <td>
 * <border = 0>
 * <tr>
 * <td>
 * \c #lane_pairing = (
 * <td>
 * (l2,l1), (l2,l3), (l2,l5),
 * <tr>
 * <td>
 * <td>
 * (l4,l1), (l4,l3), (l4,l5),
 * <tr>
 * <td>
 * <td>
 * (l6,l1), (l6,l3), (l6,l5) )
 * </table>
 * </td>
 * </tr>
 * </table>
 * </td>
 * </tr>
 * </table>
 *
 * \note In the examples, the symbols l1, l2, ... and lb1, lb2, ...
 * stand for the lane ids and lane boundary ids respectively, i.e. for
 * integers (uint64). The symbols cl1, cl2, ... represent the
 * osi3::Lane::Classification::centerline elements of the lanes with
 * the respective ids. The symbols cl1_1, cl1_2, ... stand for
 * \c #osi3::Vector3d elements.
 */
export interface Lane_Classification {
  /**
   * The type of the lane.
   *
   * Example: For l4 in image \ref HighwayExit the \c #type is \c
   * #TYPE_DRIVING.
   */
  type?:
    | Lane_Classification_Type
    | undefined;
  /**
   * Indicates that the host vehicle travels on this particular lane.
   * The host vehicle may travel on more than one lane at once. This does
   * also apply for the \c CanditateLane in the \c DetectedLane .
   */
  is_host_vehicle_lane?:
    | boolean
    | undefined;
  /**
   * The lane's center line (as a list of segments).
   *
   * The centerline describes the middle of the lane.
   *
   * \image html OSI_LaneCenterline.svg "Centerline" width=500px
   *
   * Example: In image \ref HighwayExit,
   * the centerline of lane l4 (black line) is given by
   * (cl4_1, cl4_2, cl4_3, cl4_4, cl4_5).
   *
   * \attention The points describing the center line might be set at
   * arbitrary distances. When the points are pairwise linearly connected,
   * the lateral distance to the real ideal line (as used by the
   * simulation environment internally) must not exceed 5cm. As shown in
   * the following image:
   *
   * \image html line_approximation_error.svg "Approximation error"
   * Approximation error green line.
   *
   * \note The center line is the line that a typical vehicle follows more
   * or less (depending on the situation, a little more to the left or
   * right of the center line). The intended direction of travel on the
   * lane is given by the direction defined by the sequence of points
   * forming the \c #centerline w.r.t. \c
   * #centerline_is_driving_direction.
   *
   * \note The \c #centerline is defined only for \c #type =
   * \c #TYPE_DRIVING and if exactly one or no \c #lane_pairing pair
   * exists.
   *
   * \note Intersections and non-driving lanes do not have a center line.
   * A vehicle must calculate this individually and depending on the
   * situation.
   */
  centerline?:
    | Vector3d[]
    | undefined;
  /**
   * Definition of the intended driving direction.
   *
   * Defined and used for driving lanes.
   * \c true means driving direction is according to ascending storage
   * order of center line points. \c false means driving direction is
   * according to descending storage order of center line points.
   *
   * Example: \c #centerline_is_driving_direction = \c true for lane l4
   * and \c #centerline_is_driving_direction = \c false for lane l2 in
   * image \ref HighwayExit .
   *
   * \note The \c #centerline_is_driving_direction is defined for \c #type
   * = \c #TYPE_DRIVING .
   */
  centerline_is_driving_direction?:
    | boolean
    | undefined;
  /**
   * List of IDs of all lane segments that are directly adjacent to the
   * lane on the left side (w.r.t. intended driving direction). Note that
   * lengths of lane segments are not synchronized and therefore there are
   * multiple adjacent segments if there is a split/merge point in the
   * adjacent lane.
   *
   * Example: The lane l3 is the only left adjacent lane for lane l4
   * in image \ref HighwayExit.
   *
   * \note The \c #left_adjacent_lane_id is undefined for \c #type =
   * \c #TYPE_INTERSECTION .
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  left_adjacent_lane_id?:
    | Identifier[]
    | undefined;
  /**
   * List of IDs of all lane segments that are directly adjacent to the
   * lane on the right side (w.r.t. intended driving direction). Note that
   * lengths of lane segments are not synchronized and therefore there are
   * multiple adjacent segments if there is a split/merge point in the
   * adjacent lane.
   *
   * Example: \c #right_adjacent_lane_id = (l5, l6)
   * for lane l4 in image \ref HighwayExit.
   *
   * \note The \c #right_adjacent_lane_id is undefined for \c #type =
   * \c #TYPE_INTERSECTION .
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  right_adjacent_lane_id?:
    | Identifier[]
    | undefined;
  /**
   * The antecessor/successor lane pairings of this lane. There can be
   * multiple pairings with the same antecessor and different successor
   * lanes and vice versa. The antecessor lanes end in the same point that
   * this lane starts from. The successor lanes start in the same point
   * that this lane ends in.
   *
   * Example: See image \ref Intersection.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  lane_pairing?:
    | Lane_Classification_LanePairing[]
    | undefined;
  /**
   * The right adjacent lane boundaries \c #right_lane_boundary_id may
   * only be shared with/as the left adjacent lane boundaries \c
   * #left_lane_boundary_id of the nearest right adjacent lane \c
   * #right_adjacent_lane_id.
   *
   * Example: \c #right_lane_boundary_id =
   * (lb9, lb6) for reference lane l4 in image \ref HighwayExit.
   *
   * \note Empty for intersections.
   *
   * \note The \c #right_lane_boundary_id is undefined for \c #type =
   * \c #TYPE_INTERSECTION .
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  right_lane_boundary_id?:
    | Identifier[]
    | undefined;
  /**
   * The left adjacent lane boundaries \c #left_lane_boundary_id may only
   * be shared with/as the right adjacent lane boundaries \c
   * #right_lane_boundary_id of the nearest left adjacent lane \c
   * #left_adjacent_lane_id.
   *
   * Example: \c #left_lane_boundary_id = lb5 for lane l4 in image \ref
   * HighwayExit.
   *
   * \note Empty for intersections.
   *
   * \note The \c #left_lane_boundary_id is undefined for \c #type =
   * \c #TYPE_INTERSECTION .
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  left_lane_boundary_id?:
    | Identifier[]
    | undefined;
  /**
   * The free boundaries which have no/unknown assignment to left/right.
   *
   * Example: \c #free_lane_boundary_id = lb11 for lane l7 in image \ref
   * Intersection.
   *
   * \note \c Lane with \c #type = \c #TYPE_INTERSECTION use only free
   * lane boundaries.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  free_lane_boundary_id?:
    | Identifier[]
    | undefined;
  /** The condition of the lane, e.g. influenced by weather. */
  road_condition?: Lane_Classification_RoadCondition | undefined;
}

/** Definition of available lane types. */
export enum Lane_Classification_Type {
  /** UNKNOWN - Lane of unknown type (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Any other type of lane. */
  OTHER = 1,
  /**
   * DRIVING - A normal lane.
   * Example: Lanes with IDs l1, l2, l3, l4 and l6 in image \ref
   * HighwayExit.
   */
  DRIVING = 2,
  /**
   * NONDRIVING - A road where driving is normally not permitted.
   * Example: Lane with ID l5 in image \ref HighwayExit.
   */
  NONDRIVING = 3,
  /**
   * INTERSECTION - An intersection as a lane.
   * Example: Lane with ID l7 in image \ref Intersection.
   *
   * \image html OSI_X-Junction.svg "" width=600px
   */
  INTERSECTION = 4,
}

/** \brief The condition of the road surface. */
export interface Lane_Classification_RoadCondition {
  /**
   * The temperature of the roads surface in Kelvin.
   *
   * Unit: [K]
   */
  surface_temperature?:
    | number
    | undefined;
  /**
   * The height of the water film on top of the surface in mm.
   *
   * Unit: [mm]
   */
  surface_water_film?:
    | number
    | undefined;
  /**
   * The temperature where the water on top of the surface would start
   * to freeze or dew in Kelvin.
   *
   * Unit: [K]
   */
  surface_freezing_point?:
    | number
    | undefined;
  /**
   * The percentage of ice covering the road.
   *
   * Unit: [%]
   */
  surface_ice?:
    | number
    | undefined;
  /**
   * The coefficient representing the roughness or unevenness of the
   * road. International Roughness Index (IRI) [1] values range from 0
   * = smooth ground (equivalent to driving on a plate of glass) up to
   * >
   * 20 mm/m (a very rough road).
   *
   * Estimated value ranges (IRI):
   * 0.0 [mm/m] absolutely perfect evenness
   * 0.3 -  1.8 [mm/m] airport runways and superhighways
   * 1.4 -  3.4 [mm/m] new pavements
   * 2.2 -  5.7 [mm/m] older pavements
   * 3.2 -  9.8 [mm/m] maintained unpaved roads
   * 4.0 - 11.0 [mm/m] damaged pavements
   * 8.0 - >
   * 20 [mm/m] rough unpaved roads
   *
   * Speed of normal use (IRI):
   * 30 [km/h] - 20   [mm/m]
   * 50 [km/h] - 14.5 [mm/m]
   * 60 [km/h] - 10.0 [mm/m]
   * 80 [km/h] -  8.5 [mm/m]
   * 100 [km/h] -  3.4 [mm/m]
   *
   * Road conditions (IRI);
   * 15 [mm/m] erosion gulleys and deep depressions
   * 11 [mm/m] frequent shallow depressions, some deep
   * 9 [mm/m] frequent minor depressions
   * 5 [mm/m] surface imperfections
   *
   * Unit: [mm/m]
   *
   * \par References:
   * - [1] SAYERS, M.W.; KARAMIHAS, S.M. Little Book of Profiling,
   * University of Michigan Transportation Research Institute, 1998.
   */
  surface_roughness?:
    | number
    | undefined;
  /**
   * The surface texture or fine roughness
   *
   * Whereas the IRI-based roughness or unevenness measure only takes
   * into account road wavelengths around 0.5m - 100m, the surface
   * texture or fine roughness [2] measures only wavelengths below
   * 0.5m. It is given as the standard height deviation of fine
   * roughness
   *
   * Unit: [m]
   *
   * \par References:
   * - [1] SAYERS, M.W.; KARAMIHAS, S.M. Little Book of Profiling,
   * University of Michigan Transportation Research Institute, 1998.
   * - [2] SCHNEIDER, R.: Modellierung der Wellenausbreitung fuer
   * ein bildgebendes Kfz-Radar, Dissertation, Universitaet Karlsruhe,
   * Mai 1998.
   */
  surface_texture?: number | undefined;
}

/**
 * \brief The lane ID pairings of antecessor and successor lanes.
 *
 * <table border = 0>
 * <tr>
 * <td>
 * \image html OSI_LaneIntersection.svg "" width=600px
 * </td>
 * <td>
 * <table border=0>
 * <tr>
 * <td>
 * <b>
 * \c LanePairing for lane l7:
 * </b>
 * </td>
 * </tr>
 * <tr>
 * <td>
 * <table border = 0>
 * <tr>
 * <td>
 * (l2,l1), (l2,l3), (l2,l5),
 * <tr>
 * <td>
 * (l4,l1), (l4,l3), (l4,l5),
 * <tr>
 * <td>
 * (l6,l1), (l6,l3), (l6,l5)
 * </table>
 * </td>
 * </tr>
 * </table>
 * </td>
 * </tr>
 * </table>
 *
 * \note In the example, the symbols l1, l2, ... stand for the
 * respective lane ids, i.e. for integers (uint64). The symbols cl1,
 * cl2, ... represent the osi3::Lane::Classification::centerline
 * elements of the lanes with the respective ids.
 */
export interface Lane_Classification_LanePairing {
  /** The antecessor lane ID. */
  antecessor_lane_id?:
    | Identifier
    | undefined;
  /** The successor lane ID. */
  successor_lane_id?: Identifier | undefined;
}

/**
 * \brief A lane boundary defining the border of a lane.
 *
 * The left and right lane boundary define the width of the lane. Additionally,
 * free markings can be defined, e.g. at construction sites. Free markings
 * across multiple lanes may be defined multiple times for all affected lanes.
 *
 * \image html OSI_LaneBoundary.svg "LaneBoundary" width=800px
 *
 * \note In the example, the symbols l1, l2, ... and lb1, lb2, ...
 * stand for the lane ids and lane boundary ids respectively, i.e. for
 * integers (uint64). The symbols bp2_{i+1}, bp2_{i}, bp2_{i-1} stand
 * for \c #osi3::LaneBoundary::BoundaryPoint elements.
 */
export interface LaneBoundary {
  /** The ID of the lane boundary. */
  id?:
    | Identifier
    | undefined;
  /**
   * The list of individual points defining the location of the lane boundary
   * (as a list of segments).
   *
   * Since a \c BoundaryPoint is part of a sequence, only the position
   * attribute has to be set for each instance. All other values will be
   * reused from the previous \c BoundaryPoint in the sequence or set to
   * default values if there is none or it was never set.
   *
   * \image html OSI_LaneBoundary.svg "" width=800px
   *
   * Example: The boundary_line of the \c LaneBoundary with id lb2 is given by
   * (bp2_1, ..., bp2_{i-1}, bp2_{i}, bp2_{i+1}, ...).
   *
   * \note For dashed lines, one \c BoundaryPoint has to be at the start and
   * another at the end of each dashed line segment. The first
   * \c BoundaryPoint defines the beginning of the first dashed lane marking.
   * The last \c BoundaryPoint defines the end of the last dashed lane
   * marking. For example, the area between the second and third
   * \c BoundaryPoint has no lane marking, and so on.
   * \note For Botts' dots lines, one \c BoundaryPoint position has to define
   * each Botts' dot.
   *
   * \attention For \c BoundaryPoint the same rule for the approximation
   * error applies as for \c Lane::Classification::centerline.
   */
  boundary_line?:
    | LaneBoundary_BoundaryPoint[]
    | undefined;
  /** The classification of the lane boundary. */
  classification?: LaneBoundary_Classification | undefined;
}

/**
 * \brief A single point of a lane boundary.
 *
 * \image html OSI_LaneBoundary.svg "" width=800px
 *
 * The lane boundary point bp2_{i} is one of the points of lane boundary
 * lb2.
 *
 * \note In the example, the symbols l1, l2, ... and lb1, lb2, ...
 * stand for the lane ids and lane boundary ids respectively, i.e. for
 * integers (uint64). The symbols bp2_{i+1}, bp2_{i}, bp2_{i-1} stand
 * for \c #osi3::LaneBoundary::BoundaryPoint elements.
 */
export interface LaneBoundary_BoundaryPoint {
  /** The position of the \c BoundaryPoint. */
  position?:
    | Vector3d
    | undefined;
  /**
   * The overall width of the lane boundary at the position of the
   * \c BoundaryPoint .
   * Used for lines forming lane markings.
   *
   * \image html OSI_LaneBoundaryWidth.svg "" width=600px
   *
   * \note Field need not be set if it is defined previous.
   * See \c LaneBoundary.
   */
  width?:
    | number
    | undefined;
  /**
   * The overall height of the lane boundary at the position of the
   * \c BoundaryPoint .
   * Used for guard rails, curbstone, or similar.
   *
   * \image html OSI_LaneBoundaryHeight.svg "" width=600px
   *
   * \note Field need not be set if it is previously defined.
   * See \c LaneBoundary .
   */
  height?: number | undefined;
}

/**
 * \brief \c Classification of a lane boundary.
 *
 * <table border = 0>
 * <tr>
 * <td>
 * <table border=0>
 * <tr>
 * <td>
 * <b>
 * Image Intersection
 * </b>
 * <tr>
 * <td>
 * <tr>
 * <td>
 * \c Classification for lane boundaries lb2 and lb9:
 * </td>
 * </tr>
 * <tr>
 * <td>
 * <table border = 0>
 * <tr>
 * <td>
 * \c #type = #TYPE_DASHED_LINE
 * <tr>
 * <td>
 * \c #color = #COLOR_WHITE
 * <tr>
 * </table>
 * </td>
 * </tr>
 * <tr>
 * <td>
 * \c Classification for lane boundaries lb1, lb3, lb4, lb7, lb8, lb10,
 * lb11, lb12 and lb14:
 * </td>
 * </tr>
 * <tr>
 * <td>
 * <table border = 0>
 * <tr>
 * <td>
 * \c #type = #TYPE_SOLID_LINE
 * <tr>
 * <td>
 * \c #color = #COLOR_WHITE
 * <tr>
 * </table>
 * </td>
 * </tr>
 * <tr>
 * <td>
 * \c Classification for lane boundaries lb5, lb6 and lb13:
 * </td>
 * </tr>
 * <tr>
 * <td>
 * <table border = 0>
 * <tr>
 * <td>
 * \c #type = #TYPE_CURB
 * </table>
 * </td>
 * </tr>
 * </table>
 * </td>
 * <td>
 * <table border=0>
 * <tr>
 * <td>
 * \image html OSI_LaneIntersection.svg "" width=500px
 * </td>
 * <tr>
 * <td>
 * \image html OSI_LaneBoundaryClassification.jpg "" width=600px
 * </td>
 * </table>
 * </td>
 * </tr>
 * </table>
 *
 * \note In the example, the symbols l1, l2, ... and lb1, lb2, ...
 * stand for the lane ids and lane boundary ids respectively, i.e. for
 * integers (uint64). The symbols cl1, cl2, ... represent the
 * osi3::Lane::Classification::centerline elements of the lanes with
 * the respective ids.
 */
export interface LaneBoundary_Classification {
  /** The type of the lane boundary. */
  type?:
    | LaneBoundary_Classification_Type
    | undefined;
  /** The color of the lane boundary in case of lane markings. */
  color?:
    | LaneBoundary_Classification_Color
    | undefined;
  /**
   * The ids of \c StationaryObject which limit the corresponding lane.
   * This field must be set if the \c #type is set to
   * \c #TYPE_STRUCTURE
   */
  limiting_structure_id?: Identifier[] | undefined;
}

/**
 * The lane boundary type.
 * There is no special representation for double lines, e.g. solid /
 * solid or dashed / solid. In such cases, each lane will define its own
 * side of the lane boundary.
 */
export enum LaneBoundary_Classification_Type {
  /**
   * UNKNOWN - The type of lane boundary is unknown. Value must not be used in
   * ground truth.
   */
  UNKNOWN = 0,
  /**
   * OTHER - Unspecified but known type of lane boundary.
   * Consider proposing an additional type if using TYPE_OTHER.
   */
  OTHER = 1,
  /** NO_LINE - An invisible lane boundary (e.g. unmarked part of a dashed line). */
  NO_LINE = 2,
  /** SOLID_LINE - A solid line at the lane boundary. */
  SOLID_LINE = 3,
  /** DASHED_LINE - A dashed line at the lane boundary. */
  DASHED_LINE = 4,
  /** BOTTS_DOTS - A lane boundary consisting of Botts' dots (multiple Botts dots). */
  BOTTS_DOTS = 5,
  /**
   * ROAD_EDGE - A lane boundary formed by the road's edge.
   * The road edge is the end of the (paved) road surface.
   */
  ROAD_EDGE = 6,
  /**
   * SNOW_EDGE - A lane boundary formed by a snow edge that may be on the road
   * surface.
   */
  SNOW_EDGE = 7,
  /** GRASS_EDGE - A lane boundary covered by grass. */
  GRASS_EDGE = 8,
  /** GRAVEL_EDGE - A lane boundary covered by gravel. */
  GRAVEL_EDGE = 9,
  /** SOIL_EDGE - A lane boundary covered by soil. */
  SOIL_EDGE = 10,
  /** GUARD_RAIL - A guard rail. */
  GUARD_RAIL = 11,
  /** CURB - A curb. */
  CURB = 12,
  /** STRUCTURE - A structure (e.g. building or tunnel wall). */
  STRUCTURE = 13,
}

/**
 * The color of the lane boundary in case of a lane markings.
 * Lane markings that alternate in color must be represented by
 * individual \c LaneBoundary segments.
 */
export enum LaneBoundary_Classification_Color {
  /**
   * UNKNOWN - Color of marking is unknown. Value must not be used in ground
   * truth.
   */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) color. */
  OTHER = 1,
  /**
   * NONE - Marking without color. Used to represent logical boundaries
   * without actual physical markings at the respective position.
   * Value may be used in ground truth only.
   */
  NONE = 2,
  /** WHITE - Marking with white color. */
  WHITE = 3,
  /** YELLOW - Marking with yellow / orange-yellow color. */
  YELLOW = 4,
  /** RED - Marking with red color */
  RED = 5,
  /** BLUE - Marking with blue color. */
  BLUE = 6,
  /** GREEN - Marking with green color; */
  GREEN = 7,
  /** VIOLET - Marking with violet color. */
  VIOLET = 8,
}
