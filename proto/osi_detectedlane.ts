// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_detectedlane.proto

/* eslint-disable */
import { type DetectedItemHeader } from "./osi_detectedobject";
import {
  type Lane_Classification,
  type LaneBoundary_BoundaryPoint,
  type LaneBoundary_Classification,
} from "./osi_lane";

/** \brief A lane segment as detected by the sensor. */
export interface DetectedLane {
  /** Common information of one detected item. */
  header?:
    | DetectedItemHeader
    | undefined;
  /**
   * A list of candidates for this lane as estimated by the sensor.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  candidate?: DetectedLane_CandidateLane[] | undefined;
}

/**
 * \brief A candidate for a detected lane as estimated by the
 * sensor.
 */
export interface DetectedLane_CandidateLane {
  /**
   * The estimated probability that this candidate is the true value.
   *
   * \note The sum of all \c #probability must be one. This probability is
   * given under the condition of
   * \c DetectedItemHeader::existence_probability.
   *
   * Range: [0,1]
   */
  probability?:
    | number
    | undefined;
  /**
   * The classification of one lane that defines this candidate.
   *
   * \note IDs, which are referenced in this message, usually
   * reference to \c DetectedXXX::tracking_id IDs.
   */
  classification?: Lane_Classification | undefined;
}

/**
 * \brief A lane boundary segment as detected by the sensor.
 *
 * \image html OSI_DetectedLaneBoundary.svg
 */
export interface DetectedLaneBoundary {
  /** Common information of one detected item. */
  header?:
    | DetectedItemHeader
    | undefined;
  /**
   * A list of candidates for this lane boundary as estimated by the
   * sensor.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  candidate?:
    | DetectedLaneBoundary_CandidateLaneBoundary[]
    | undefined;
  /**
   * The list of individual points defining the location of the lane boundary
   * (as a list of segments).
   *
   * Since a \c BoundaryPoint is part of a sequence, only the position
   * attribute has to be set for each instance. All other values will be
   * reused from the previous \c BoundaryPoint in the sequence or set to
   * default values if there is none or it was never set. For dashed lines,
   * one \c LaneBoundary::BoundaryPoint has to be at the start and another at
   * the end of each dashed line segment. For Botts' dots lines, one \c
   * LaneBoundary::BoundaryPoint position has to define each Botts' dot.
   *
   * \attention For \c LaneBoundary::BoundaryPoint the same rules regarding
   * maximum distance and approximation error apply as for \c
   * Lane::Classification::centerline.
   */
  boundary_line?:
    | LaneBoundary_BoundaryPoint[]
    | undefined;
  /**
   * The root mean squared error of the \c LaneBoundary::BoundaryPoint.
   * Each \c #candidate has the same \c #boundary_line points and exact
   * one \c #boundary_line_rmse rmse confidence value is
   * specified which is suitable for all candidates.
   */
  boundary_line_rmse?:
    | LaneBoundary_BoundaryPoint[]
    | undefined;
  /**
   * Confidence of the segments of the \c LaneBoundary::BoundaryPoint.
   * Each \c #candidate has the same \c #boundary_line points and exact
   * one \c #boundary_line_confidences confidence value is
   * specified which is suitable for all candidates.
   *
   * Range: [0,1]
   */
  boundary_line_confidences?: number[] | undefined;
}

/**
 * \brief A candidate for a detected lane boundary as estimated by the
 * sensor.
 */
export interface DetectedLaneBoundary_CandidateLaneBoundary {
  /**
   * The estimated probability that this candidate is the true value.
   *
   * \note The sum of all \c #probability must be one. This probability is
   * given under the condition of
   * \c DetectedItemHeader::existence_probability.
   *
   * Range: [0,1]
   */
  probability?:
    | number
    | undefined;
  /**
   * The classification of one lane boundary that defines this candidate.
   *
   * \note IDs, which are referenced in this message, usually
   * reference to \c DetectedXXX::tracking_id IDs.
   */
  classification?: LaneBoundary_Classification | undefined;
}
