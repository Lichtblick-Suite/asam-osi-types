// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_trafficcommand.proto

/* eslint-disable */
import { type Identifier, type Orientation3d, type StatePoint, type Timestamp, type Vector3d } from "./osi_common";
import { type InterfaceVersion } from "./osi_version";

/**
 * \brief The scenario engine provides control commands in the traffic command
 * message to traffic participant models. The control commands are based on
 * the scenario.
 *
 * \note This interface is currently just a placeholder and will be
 * changed in experimental ways to support basic scenario execution.
 * In the future this interface shall be aligned with the level of
 * atomic actions as described in OpenSCENARIO 1.0 or later.
 */
export interface TrafficCommand {
  /**
   * The interface version used by the sender (scenario engine).
   *
   * \rules
   * is_set
   * \endrules
   */
  version?:
    | InterfaceVersion
    | undefined;
  /**
   * The data timestamp of the simulation environment. Zero time is arbitrary
   * but must be identical for all messages. Zero time does not need to
   * coincide with the UNIX epoch. It is recommended to use zero timestamp as
   * the starting time point of the simulation.
   *
   * \note For traffic command data the timestamp coincides both with
   * the notional simulation time the data applies to and the time it was sent
   * There is no inherent latency for traffic command data, as opposed
   * to sensor data.
   *
   * \rules
   * is_set
   * \endrules
   */
  timestamp?:
    | Timestamp
    | undefined;
  /**
   * The ID of this traffic participant.
   *
   * \rules
   * is_set
   * \endrules
   */
  traffic_participant_id?:
    | Identifier
    | undefined;
  /**
   * Commanded traffic action(s) if any.
   *
   * \note If more than one action is supplied in one command message
   * all actions are executed in parallel.
   */
  action?: TrafficAction[] | undefined;
}

/**
 * \brief Atomic traffic actions to be performed.
 *
 * The transmitted commands are the atomic traffic actions described by
 * this message.
 *
 * \note This message is notionally a multiple choice selection, that is, only
 * certain combinations of atomic traffic actions shall be transmitted within
 * certain time intervals, for example, for plausibility reasons. The restrictions
 * regarding that are not part of this message, yet are seen as a task of the
 * scenario description, for example, OpenSCENARIO.
 *
 * \note All traffic actions are sent only once just before they are about
 * to start. This is also true, if their execution is expected to
 * take simulation time. To inform the traffic participant
 * model that certain actions must or shall be terminated, there are
 * explicit actions nested inside this message (AbortActionsAction,
 * EndActionsAction), which hold a reference to the respective actions.
 * Furthermore, there exists a \c TrafficCommandUpdate message for the
 * traffic participant to report back on potentially dismissed actions.
 */
export interface TrafficAction {
  /** A FollowTrajectoryAction. */
  follow_trajectory_action?:
    | TrafficAction_FollowTrajectoryAction
    | undefined;
  /** A FollowPathAction. */
  follow_path_action?:
    | TrafficAction_FollowPathAction
    | undefined;
  /** An AcquireGlobalPositionAction. */
  acquire_global_position_action?:
    | TrafficAction_AcquireGlobalPositionAction
    | undefined;
  /** A LaneChangeAction. */
  lane_change_action?:
    | TrafficAction_LaneChangeAction
    | undefined;
  /** A SpeedAction. */
  speed_action?:
    | TrafficAction_SpeedAction
    | undefined;
  /** An AbortActionsAction. */
  abort_actions_action?:
    | TrafficAction_AbortActionsAction
    | undefined;
  /** An EndActionsAction. */
  end_actions_action?:
    | TrafficAction_EndActionsAction
    | undefined;
  /** A CustomAction. */
  custom_action?:
    | TrafficAction_CustomAction
    | undefined;
  /** A LongitudinalDistanceAction. */
  longitudinal_distance_action?:
    | TrafficAction_LongitudinalDistanceAction
    | undefined;
  /** A LaneOffsetAction. */
  lane_offset_action?:
    | TrafficAction_LaneOffsetAction
    | undefined;
  /** A LateralDistanceAction. */
  lateral_distance_action?:
    | TrafficAction_LateralDistanceAction
    | undefined;
  /** A TeleportAction. */
  teleport_action?: TrafficAction_TeleportAction | undefined;
}

/** Definition of following mode. */
export enum TrafficAction_FollowingMode {
  /**
   * POSITION - Following mode position forces the traffic participant to
   * follow a path/trajectory explicitly, disregarding any internal
   * constraints, for example, steering dynamics.
   */
  POSITION = 0,
  /**
   * FOLLOW - Following mode follow allows the traffic participant to
   * treat a path/trajectory as a target, to be achieved as closely
   * as possible while retaining any internal constraints,
   * for example, steering dynamics.
   */
  FOLLOW = 1,
}

/** Definition of dynamic shapes. */
export enum TrafficAction_DynamicsShape {
  /** UNSPECIFIED - Shape is unspecified. */
  UNSPECIFIED = 0,
  /** LINEAR - Shape is linear. */
  LINEAR = 1,
  /** CUBIC - Shape is cubic. */
  CUBIC = 2,
  /** SINUSOIDAL - Shape is sinusoidal. */
  SINUSOIDAL = 3,
  /** STEP - Shape is a step function. */
  STEP = 4,
}

/** \brief The action header */
export interface TrafficAction_ActionHeader {
  /**
   * The unique id of the action.
   *
   * \note This field is mandatory.
   *
   * \note This id must be unique within all traffic command
   * messages exchanged with one traffic participant.
   *
   * \rules
   * is_set
   * \endrules
   */
  action_id?: Identifier | undefined;
}

/**
 * \brief DynamicConstraints
 *
 * This message is used in Longitudinal and Lateral Distance Actions as
 * constraints on the TrafficParticipant not allowing them to exceed/drop below
 * certain speeds/acceleration levels.
 */
export interface TrafficAction_DynamicConstraints {
  /**
   * Maximum acceleration the distance controller is allowed to use for keeping distance.
   *
   * Unit: m/s^2
   */
  max_acceleration?:
    | number
    | undefined;
  /**
   * Maximum deceleration the distance controller is allowed to use for keeping distance.
   *
   * Unit: m/s^2
   */
  max_deceleration?:
    | number
    | undefined;
  /**
   * Maximum speed the distance controller is allowed to use for keeping distance.
   *
   * Unit: m/s
   */
  max_speed?: number | undefined;
}

/**
 * \brief Follow trajectory action.
 *
 * Controls a traffic participant to follow a trajectory using vertices
 * with timings. It specifies the motion in space as a function of time.
 *
 * \note The StatePoint messages in trajectory_point requires a
 * specified timestamp.
 *
 * \note This action is aligned with the FollowTrajectoryAction of
 * OpenSCENARIO 1.0 using a 4/7D trajectory with shape Polyline.
 */
export interface TrafficAction_FollowTrajectoryAction {
  /** The action header. */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /**
   * A list of trajectory StatePoints.
   *
   * Set the timestamp fields and position fields for all
   * trajectory points. The orientation fields can be set
   * depending on the constrain_orientation field being true.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  trajectory_point?:
    | StatePoint[]
    | undefined;
  /**
   * Constrain the orientation of the traffic participant as specified
   * by the trajectory points.
   *
   * This boolean flag defines whether orientation values supplied in
   * the trajectory points (if any) shall be used to constrain the
   * orientation of the traffic participant or not.
   */
  constrain_orientation?:
    | boolean
    | undefined;
  /**
   * Specify the following mode that should be employed in executing
   * the trajectory.
   */
  following_mode?: TrafficAction_FollowingMode | undefined;
}

/**
 * \brief Follow path action.
 *
 * Controls a traffic participant to follow a path using vertices. It
 * specifies the motion in space independent of time.
 *
 * \note The StatePoint messages in path_point only requires a specified
 * position field. The orientation can be set optionally. Any
 * timestamp StatePoint values are ignored.
 *
 * \note This action is aligned with the FollowTrajectoryAction of
 * OpenSCENARIO 1.0 using a 3/6D trajectory with shape Polyline.
 */
export interface TrafficAction_FollowPathAction {
  /** The action header */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /**
   * A list of path StatePoints
   *
   * Set the position fields for all path points.
   * The timestamp field are not required and ignored.
   * The orientation fields can be set depending on the constrain_orientation
   * field being true.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  path_point?:
    | StatePoint[]
    | undefined;
  /**
   * Constrain the orientation of the traffic participant as specified
   * by the path points.
   *
   * This boolean flag defines whether orientation values supplied in
   * the path points shall be used to constrain the orientation
   * of the traffic participant or not.
   */
  constrain_orientation?:
    | boolean
    | undefined;
  /**
   * Specify the following mode that should be employed in executing
   * the path.
   */
  following_mode?: TrafficAction_FollowingMode | undefined;
}

/**
 * \brief Acquire global position action.
 *
 * This action assigns a route to a traffic participant. The route
 * assigned will be the shortest route (along roads or satisfying any
 * other constraints a traffic participant is operating under) between
 * the traffic participant's current position and the position specified.
 *
 * As with all routing actions, the exact way this route is achieved is
 * under the control of the traffic participant model.
 *
 * \note This action is aligned with the AcquirePositionAction of
 * OpenSCENARIO 1.0 using a WorldPosition position argument.
 */
export interface TrafficAction_AcquireGlobalPositionAction {
  /** The action header. */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /**
   * Position in the global coordinate system.
   *
   * The position refers to the center (x,y,z) of the bounding box.
   *
   * \note Remark: The definition of the reference point follows the
   * specification of the \c BaseMoving message.
   */
  position?:
    | Vector3d
    | undefined;
  /**
   * Orientation in the global coordinate system.
   *
   * This is optional. If no orientation is given, the end orientation
   * is under control of the traffic participant.
   */
  orientation?: Orientation3d | undefined;
}

/**
 * \brief Lane change action.
 *
 * This action assigns a lane change to a traffic participant. The fields
 * of this message enable different levels of constraint for the traffic
 * participant depending on the use case. In case the constraints are
 * supposed to be small, the dynamics shape or even the duration and
 * the distance for the lane change can be omitted.
 *
 * \note This action is aligned with LaneChangeAction of OpenSCENARIO 1.0
 * defining the targeted lane and optionally the parametrization of the
 * lane change.
 */
export interface TrafficAction_LaneChangeAction {
  /** The action header. */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /**
   * Targeted lane relative to the current lane.
   *
   * Convention: +1 means to the right, -1 means to the left.
   */
  relative_target_lane?:
    | number
    | undefined;
  /**
   * Specified shape of the lane change action.
   * If the shape is unspecified (enum value 0), the shape of the
   * lane change is open to the traffic participant model.
   */
  dynamics_shape?:
    | TrafficAction_DynamicsShape
    | undefined;
  /**
   * Duration of the lane change.
   *
   * A value of 0.0 (the default value) imposes no constraint
   * on the duration, unless the dynamics shape is a step function,
   * where an immediate step is effected.
   *
   * Unit: s
   */
  duration?:
    | number
    | undefined;
  /**
   * Distance of the lane change.
   *
   * A value of 0.0 (the default value) imposes no constraint
   * on the distance, unless the dynamics shape is a step function,
   * where an immediate step is effected.
   *
   * Unit: m
   */
  distance?: number | undefined;
}

/**
 * \brief Speed action.
 *
 * This action assigns a targeted speed to a traffic participant.
 * The action can be constrained by specifying the dynamics
 * shape or even the duration and the distance of the acceleration /
 * deceleration process.
 *
 * \note This action is aligned with SpeedAction of OpenSCENARIO 1.0
 * defining the targeted speed and optionally the parametrization of the
 * speed transition.
 */
export interface TrafficAction_SpeedAction {
  /** The action header */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /** Targeted absolute speed. */
  absolute_target_speed?:
    | number
    | undefined;
  /**
   * Specified transition shape of the speed change action.
   * If the shape is unspecified (enum value 0), the shape of the
   * speed change is open to the traffic participant model.
   */
  dynamics_shape?:
    | TrafficAction_DynamicsShape
    | undefined;
  /**
   * Duration of the speed change.
   *
   * A value of 0.0 (the default value) imposes no constraint
   * on the duration, unless the dynamics shape is a step function,
   * where an immediate step is effected.
   *
   * Unit: s
   */
  duration?:
    | number
    | undefined;
  /**
   * Distance of the speed change.
   *
   * A value of 0.0 (the default value) imposes no constraint
   * on the distance, unless the dynamics shape is a step function,
   * where an immediate step is effected.
   *
   * Unit: m
   */
  distance?: number | undefined;
}

/**
 * \brief AbortActionsAction.
 *
 * This action tells a traffic participant that it should immediately
 * abort the execution of other actions referenced within this action.
 * In contrast to the EndActionsAction this action forces a hard
 * termination of the referenced actions.
 */
export interface TrafficAction_AbortActionsAction {
  /** The action header */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /**
   * Actions which must be aborted immediately.
   *
   * These fields hold the action ids of the actions that must be
   * aborted immediately.
   */
  target_action_id?: Identifier[] | undefined;
}

/**
 * \brief End actions action.
 *
 * This action tells a traffic participant that the execution of the
 * referenced actions is regarded as successfully performed. The
 * termination of the referenced actions is allowed to be performed
 * gracefully.
 */
export interface TrafficAction_EndActionsAction {
  /** The action header */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /**
   * Actions which are regarded as successfully executed.
   *
   * These fields hold the action ids of the actions that are regarded
   * as successfully executed and shall be terminated gracefully.
   */
  target_action_id?: Identifier[] | undefined;
}

/**
 * \brief Custom Action.
 *
 * This action assigns a custom command to a traffic participant.
 * The syntax and semantics of this action is implementation defined.
 * It is entirely up to each individual traffic participant which
 * custom commands it supports, if any, and how they must be phrased.
 *
 * \note This action is aligned with CustomCommandAction of OpenSCENARIO 1.0
 * providing a customizable user defined action.
 */
export interface TrafficAction_CustomAction {
  /** The Action Header. */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /**
   * The custom command given to the traffic participant. Used to convey a specific instruction
   * (for example, "exit_highway"), or event (for example, "left_indicator_activated").
   *
   * \note This corresponds to the content of the OpenSCENARIO 1.0 CustomCommandAction field.
   */
  command?:
    | string
    | undefined;
  /**
   * The type of the custom command given to the traffic participant. Can be used to simplify
   * how commands are grouped. For example, the command_type could be "sensor_failure" and the
   * command value could be "front_right_camera".  This avoids long commands, like
   * "sensor_failure: front_right_camera".
   *
   * \note This corresponds to the "type" attribute of the OpenSCENARIO 1.0 CustomCommandAction.
   */
  command_type?: string | undefined;
}

/**
 * \brief Longitudinal Distance Action
 *
 * The action tells the (host) traffic participant to reach a certain longitudinal distance
 * relative to a target traffic participant. The longitudinal distance is defined as the distance
 * along the centerline of the lane, on which the (host) traffic participant is currently located.
 * The interpolation strategy between centerline points for calculating
 * that distance along the centerline is open to the traffic participant modeler.
 *
 * \note This action is aligned with LongitudinalDistanceAction of OpenSCENARIO 1.0
 * defining the reference traffic participant and the distance.
 *
 * \note Limitation: This concept currently only works for lanes with a centerline, i.e. for lanes
 * of TYPE_DRIVING, not for lanes of TYPE_NONDRIVING or TYPE_INTERSECTION.
 */
export interface TrafficAction_LongitudinalDistanceAction {
  /** Action Header of the message */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /** Unique Id of the reference traffic participant to which the distance is defined. */
  target_traffic_participant_id?:
    | Identifier
    | undefined;
  /**
   * The distance to reach along the lane
   *
   * Unit: m
   */
  distance?:
    | number
    | undefined;
  /**
   * Determine the measurement of longitudinal distance between the traffic
   * participant receiving this action and the reference traffic
   * participant.
   * True: Longitudinal distance is measured using the distance between closest bounding box points.
   * False: Longitudinal distance is measured using the distance between the center of each object's bounding box.
   */
  freespace?:
    | boolean
    | undefined;
  /**
   * Define whether the traffic participant should only reach the distance once
   * or if it should also keep the distance after having reached it.
   * True: the traffic participant shall approach the reference participant
   * and follow with the distance specified until the action is aborted (communicate with AbortActionsAction).
   * False: the action ends as soon as the traffic participant has reached
   * the specified distance (communicate with EndActionsAction).
   */
  follow?:
    | boolean
    | undefined;
  /**
   * Parameter that assigns either unlimited dynamics (if omitted)
   * or limited maxAcceleration/maxDeceleration/maxSpeed to the action.
   */
  dynamic_constraints?: TrafficAction_DynamicConstraints | undefined;
}

/**
 * \brief Lateral Distance Action
 *
 * The action tells the (host) traffic participant to reach a certain lateral distance relative to
 * a target traffic participant. The lateral distance is defined along an imaginative perpendicular line
 * with respect to the centerline of the current (host) traffic participant's lane.
 * The interpolation strategy between centerline points for calculating that distance along the imaginative
 * perpendicular line is open to the traffic participant modeler.
 *
 * \note This action is aligned with LateralDistanceAction of OpenSCENARIO 1.0
 * defining the reference traffic participant and the distance.
 *
 * \note Limitation: This concept currently only works for lanes with a centerline, i.e. for lanes
 * of TYPE_DRIVING, not for lanes of TYPE_NONDRIVING or TYPE_INTERSECTION.
 */
export interface TrafficAction_LateralDistanceAction {
  /** Action Header of the message */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /** Id of the reference entity the lateral distance shall be kept to. */
  target_traffic_participant_id?:
    | Identifier
    | undefined;
  /**
   * Lateral distance value.
   *
   * Unit: m
   */
  distance?:
    | number
    | undefined;
  /**
   * Determine the measurement of lateral distance between the traffic
   * participant receiving this action and the reference traffic
   * participant.
   * True: Lateral distance is measured using the distance between closest bounding box points.
   * False: Lateral distance is measured using the distance between the center of each object's bounding box.
   */
  freespace?:
    | boolean
    | undefined;
  /**
   * Define whether the traffic participant should only reach the distance once
   * or if it should also keep the distance after having reached it.
   * True: the traffic participant shall approach the reference participant
   * and follow with the distance specified until the action is aborted (communicate with AbortActionsAction).
   * False: the action ends as soon as the traffic participant has reached
   * the specified distance (communicate with EndActionsAction).
   */
  follow?:
    | boolean
    | undefined;
  /**
   * Parameter that assigns either unlimited dynamics (if omitted)
   * or limited maxAcceleration/maxDeceleration/maxSpeed to the action.
   */
  dynamic_constraints?: TrafficAction_DynamicConstraints | undefined;
}

/**
 * \brief Lane Offset Action
 *
 * This action assigns a targeted lane offset to a traffic participant.
 * The action can be constrained by specifying the dynamics shape of the
 * lateral transition profile.
 *
 * \note This action is aligned with LaneOffsetAction of OpenSCENARIO 1.0.
 */
export interface TrafficAction_LaneOffsetAction {
  /** The Action Header */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /**
   * Targeted lane offset in meters relative to the centerline of the
   * current traffic participant's lane. Positive values mean left of the centerline,
   * negative values mean right of the centerline.
   *
   * Unit: m
   */
  target_lane_offset?:
    | number
    | undefined;
  /**
   * Specified transition shape of reaching the lane offset.
   * If the shape is unspecified (enum value 0), the shape of the
   * transition is open to the traffic participant model.
   */
  dynamics_shape?: TrafficAction_DynamicsShape | undefined;
}

/**
 * \brief Teleport Action
 *
 * This Action allows to immediately place a traffic participant to
 * another position.
 *
 * \note This action is aligned with the TeleportAction of
 * OpenSCENARIO 1.0 using a WorldPosition position argument.
 */
export interface TrafficAction_TeleportAction {
  /** The Action Header */
  action_header?:
    | TrafficAction_ActionHeader
    | undefined;
  /**
   * Position in the global coordinate system.
   *
   * The position refers to the center (x,y,z) of the bounding box.
   *
   * \note Remark: The definition of the reference point follows the
   * specification of the \c BaseMoving message.
   */
  position?:
    | Vector3d
    | undefined;
  /**
   * Orientation in the global coordinate system.
   *
   * This is optional, if no orientation is given, the end orientation
   * is under control of the traffic participant.
   */
  orientation?: Orientation3d | undefined;
}
