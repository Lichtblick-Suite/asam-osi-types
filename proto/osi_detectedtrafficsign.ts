// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_detectedtrafficsign.proto

/* eslint-disable */
import { type BaseStationary } from "./osi_common";
import { type DetectedItemHeader } from "./osi_detectedobject";
import {
  type TrafficSign_MainSign_Classification,
  type TrafficSign_SupplementarySign_Classification,
} from "./osi_trafficsign";

/**
 * \brief A traffic sign in the environment as detected by the sensor.
 *
 * \image html OSI_DetectedSign.svg
 *
 * The parent frame of a detected traffic sign is the virtual sensor coordinate
 * system.
 *
 * \note The virtual sensor coordinate system is relative to the vehicle coordinate
 * system which has its origin in the center of the rear axle of the ego
 * vehicle. This means if virtual sensor mounting position and orientation are
 * set to (0,0,0) the virtual sensor coordinate system coincides with the
 * vehicle coordinate system.
 */
export interface DetectedTrafficSign {
  /** Common information of one detected item. */
  header?:
    | DetectedItemHeader
    | undefined;
  /** The main sign as detected by the sensor. */
  main_sign?:
    | DetectedTrafficSign_DetectedMainSign
    | undefined;
  /** A list of additional supplementary sign(s) as detected by the sensor. */
  supplementary_sign?: DetectedTrafficSign_DetectedSupplementarySign[] | undefined;
}

/**
 * \brief Candidates for a detected main sign as estimated by the sensor.
 *
 * \image html OSI_DetectedMainSign.svg
 */
export interface DetectedTrafficSign_DetectedMainSign {
  /**
   * A list of candidates for this traffic sign as estimated by the
   * sensor.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  candidate?:
    | DetectedTrafficSign_DetectedMainSign_CandidateMainSign[]
    | undefined;
  /**
   * The base parameters of the traffic sign.
   *
   * The orientation of the bounding box \c #base
   * ( \c BaseStationary::orientation ) is defined as follows:
   *
   * The z-axis of the given \c BaseStationary::orientation is the vector
   * from the bottom to the top of the traffic sign's 2D image plate.
   * (Normally it is equal to the ground truth z-axis.)
   *
   * The x-axis of the given \c BaseStationary::orientation is view
   * normal of the traffic sign's image.
   *
   * This x-axis points from the traffic sign's image in the direction
   * from where a 'viewer' could see the traffic sign image.
   */
  base?:
    | BaseStationary
    | undefined;
  /**
   * The root mean squared error of the base parameters of the detected
   * traffic sign. \c TrafficSign::MainSign::base has to be identical for
   * all \c #candidate traffic signs.
   */
  base_rmse?:
    | BaseStationary
    | undefined;
  /** The estimated geometry of the traffic sign. */
  geometry?: DetectedTrafficSign_DetectedMainSign_Geometry | undefined;
}

/** Definition of traffic sign geometries. */
export enum DetectedTrafficSign_DetectedMainSign_Geometry {
  /**
   * UNKNOWN - Geometry of the traffic sign is unknown (must not be used in
   * ground truth).
   */
  UNKNOWN = 0,
  /** OTHER - Geometry of the traffic sign is unspecified (but known). */
  OTHER = 1,
  /** CIRCLE - Traffic sign has a circular geometry. (0 corners) */
  CIRCLE = 2,
  /**
   * TRIANGLE_TOP - Traffic sign has a triangular geometry pointing to the top. (3
   * corners)
   */
  TRIANGLE_TOP = 3,
  /** TRIANGLE_DOWN - Traffic sign has a triangular geometry pointing down. (3 corners) */
  TRIANGLE_DOWN = 4,
  /** SQUARE - Traffic sign has a square geometry. (4 corners) */
  SQUARE = 5,
  /**
   * POLE - Traffic sign that has a pole geometry. (height is bigger than
   * width e.g. pole indicating highways exit in xx m). (4 corners)
   */
  POLE = 6,
  /**
   * RECTANGLE - Traffic sign has a rectangle geometry. (width is bigger than
   * height e.g. one-way) (4 corners)
   */
  RECTANGLE = 7,
  /**
   * PLATE - Traffic sign that has an oversize rectangle geometry. (4 corners)
   * E.g. direction plates on highway or city signs.
   */
  PLATE = 8,
  /** DIAMOND - Traffic sign has a diamond geometry. (4 corners) */
  DIAMOND = 9,
  /**
   * ARROW_LEFT - Traffic sign has a geometry of an arrow pointing to the left. (5
   * corners)
   */
  ARROW_LEFT = 10,
  /**
   * ARROW_RIGHT - Traffic sign has a geometry of an arrow pointing to the right. (5
   * corners)
   */
  ARROW_RIGHT = 11,
  /** OCTAGON - Traffic sign has an octagon geometry. (8 corners) */
  OCTAGON = 12,
}

/**
 * \brief A candidate for a detected main sign as estimated by the
 * sensor.
 */
export interface DetectedTrafficSign_DetectedMainSign_CandidateMainSign {
  /**
   * The estimated probability that this candidate is the true value.
   *
   * \note The sum of all \c #probability must be one. This
   * probability is given under the condition of \c
   * DetectedItemHeader::existence_probability.
   *
   * \rules
   * is_less_than_or_equal_to: 1
   * is_greater_than_or_equal_to: 0
   * \endrules
   */
  probability?:
    | number
    | undefined;
  /**
   * The classification of one main sign that defines this candidate.
   *
   * \note IDs, which are referenced in this message, usually
   * reference to \c DetectedXXX::tracking_id IDs.
   */
  classification?: TrafficSign_MainSign_Classification | undefined;
}

/**
 * \brief Candidates for all detected supplementary signs of one traffic
 * sign as estimated by the sensor.
 *
 * \image html OSI_DetectedSupplementarySign.svg
 */
export interface DetectedTrafficSign_DetectedSupplementarySign {
  /**
   * The definition of one of more supplementary signs that together
   * define this candidate.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  candidate?:
    | DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign[]
    | undefined;
  /**
   * The base parameters of the supplementary traffic sign.
   *
   * The orientation of the bounding box \c SupplementarySign::base
   * ( \c BaseStationary::orientation ) is defined as follows:
   * The z-axis of the given \c BaseStationary::orientation is the vector
   * from the bottom to the top of the supplementary traffic sign's 2D
   * image plate. (Normally it is equal to the ground truth z-axis.) The
   * x-axis of the given \c BaseStationary::orientation is view normal of
   * the supplementary traffic sign's image. This x-axis points from the
   * supplementary traffic sign's image in the direction from where a
   * 'viewer' could see the supplementary traffic sign image.
   */
  base?:
    | BaseStationary
    | undefined;
  /**
   * The root mean squared error of the base parameters of the detected
   * supplementary traffic sign. \c #candidate
   * \c TrafficSign::SupplementarySign::base has to be identical for all
   * \c #candidate supplementary traffic signs.
   */
  base_rmse?: BaseStationary | undefined;
}

/**
 * \brief A candidate for a detected supplementary sign as estimated by
 * the sensor.
 */
export interface DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign {
  /**
   * The estimated probability that this candidate is the true value.
   *
   * \note The sum of all \c #probability must be one. This
   * probability is given under the condition of \c
   * DetectedItemHeader::existence_probability.
   *
   * \rules
   * is_less_than_or_equal_to: 1
   * is_greater_than_or_equal_to: 0
   * \endrules
   */
  probability?:
    | number
    | undefined;
  /**
   * The classification of one of more supplementary signs that
   * together define this candidate.
   *
   * \note IDs, which are referenced in this message, usually
   * reference to \c DetectedXXX::tracking_id IDs.
   */
  classification?: TrafficSign_SupplementarySign_Classification | undefined;
}
