// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: osi_object.proto

/* eslint-disable */
import { type BaseMoving, type BaseStationary, type Identifier, type Vector3d } from "./osi_common";

/**
 * \brief A simulated object that is neither a moving object (vehicle or
 * \c MovingObject e.g. pedestrian, animal, or vehicle) nor a traffic related
 * object (\c TrafficLight, \c TrafficSign).
 *
 * \image html OSI_BaseStationary.svg
 *
 * \c StationaryObject excludes traffic lights, traffic signs and road marking
 */
export interface StationaryObject {
  /** The ID of the object. */
  id?:
    | Identifier
    | undefined;
  /** The base parameters of the stationary object. */
  base?:
    | BaseStationary
    | undefined;
  /** The classification of the stationary object. */
  classification?:
    | StationaryObject_Classification
    | undefined;
  /**
   * Opaque reference of an associated 3D model of the stationary object.
   *
   * \note It is implementation-specific how model_references are resolved to
   * 3d models.
   */
  model_reference?: string | undefined;
}

/** \brief Classification data for a stationary object. */
export interface StationaryObject_Classification {
  /** The type of the object. */
  type?:
    | StationaryObject_Classification_Type
    | undefined;
  /** The dominating material of the structure. */
  material?:
    | StationaryObject_Classification_Material
    | undefined;
  /** The dominating density of the material of the structure. */
  density?:
    | StationaryObject_Classification_Density
    | undefined;
  /** The dominating color of the material of the structure. */
  color?: StationaryObject_Classification_Color | undefined;
}

/** Definition of object types. */
export enum StationaryObject_Classification_Type {
  /** UNKNOWN - Type of the object is unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) type of object. */
  OTHER = 1,
  /** BRIDGE - Object is a bridge. */
  BRIDGE = 2,
  /** BUILDING - Object is a building. */
  BUILDING = 3,
  /** POLE - Object is a pole (e.g. from a traffic light). */
  POLE = 4,
  /** PYLON - Object is a pylon. */
  PYLON = 5,
  /** DELINEATOR - Object is a delineator (e.g. at a construction site). */
  DELINEATOR = 6,
  /** TREE - Object is a tree. */
  TREE = 7,
  /** BARRIER - Object is a barrier. */
  BARRIER = 8,
  /** VEGETATION - Object is vegetation. */
  VEGETATION = 9,
  /** CURBSTONE - Object is a curbstone. */
  CURBSTONE = 10,
  /** WALL - Object is a wall. */
  WALL = 11,
  /**
   * VERTICAL_STRUCTURE - Landmarks corresponding to vertical structures in the
   * environment.
   */
  VERTICAL_STRUCTURE = 12,
  /**
   * RECTANGULAR_STRUCTURE - Landmarks corresponding to rectangular structures in the
   * environment, like walls.
   */
  RECTANGULAR_STRUCTURE = 13,
  /**
   * OVERHEAD_STRUCTURE - Landmarks corresponding to overhead structures in the
   * environment, like sign bridges.
   */
  OVERHEAD_STRUCTURE = 14,
  /**
   * REFLECTIVE_STRUCTURE - Landmarks corresponding to light sources or reflective structures
   * in the environment, like street lights or reflective poles on the
   * road boarder.
   */
  REFLECTIVE_STRUCTURE = 15,
  /**
   * CONSTRUCTION_SITE_ELEMENT - Landmarks corresponding to construction site elements in the
   * environment, like cones or beacons.
   */
  CONSTRUCTION_SITE_ELEMENT = 16,
}

/** Definition of material types. */
export enum StationaryObject_Classification_Material {
  /**
   * UNKNOWN - Type of the material is unknown (must not be used in ground
   * truth).
   */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) type of material. */
  OTHER = 1,
  /** WOOD - Wooden structure. */
  WOOD = 2,
  /** PLASTIC - Plastic structure. */
  PLASTIC = 3,
  /** CONCRETE - Concrete structure. */
  CONCRETE = 4,
  /** METAL - Metal structure. */
  METAL = 5,
  /** STONE - Natural stone structure. */
  STONE = 6,
  /** GLAS - Glas structure. */
  GLAS = 7,
  /** MUD - Mud structure. */
  MUD = 8,
}

/** Definition of material density types. */
export enum StationaryObject_Classification_Density {
  /**
   * UNKNOWN - Type of the material density is unknown (must not be used in
   * ground truth).
   */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) type of material density. */
  OTHER = 1,
  /** SOLID - No perforation - solid; */
  SOLID = 2,
  /** SMALL_MESH - Perforation max. ]0; 100] [mm] */
  SMALL_MESH = 3,
  /** MEDIAN_MESH - Perforation max. ]100; 500] [mm] */
  MEDIAN_MESH = 4,
  /** LARGE_MESH - Perforation max. ]500; 5000] [mm] */
  LARGE_MESH = 5,
  /** OPEN - Perforation max. ]5000; infinity] [mm] */
  OPEN = 6,
}

/** Definition of colors for structures. */
export enum StationaryObject_Classification_Color {
  /** UNKNOWN - Color is unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) color. */
  OTHER = 1,
  /** YELLOW - Yellow. */
  YELLOW = 2,
  /** GREEN - Green. */
  GREEN = 3,
  /** BLUE - Blue. */
  BLUE = 4,
  /** VIOLET - Violet. */
  VIOLET = 5,
  /** RED - Red. */
  RED = 6,
  /** ORANGE - Orange. */
  ORANGE = 7,
  /** BLACK - Black. */
  BLACK = 8,
  /** GREY - GREY. */
  GREY = 9,
  /** WHITE - White. */
  WHITE = 10,
}

/**
 * \brief A simulated object that is either a vehicle or another
 * moving object (animal, pedestrian, etc), but not a stationary
 * object (\c TrafficLight, \c TrafficSign, or \c StationaryObject).
 *
 * \image html OSI_MovingObject.svg
 *
 * \image html OSI_HostVehicle.svg
 *
 * \note The field \c MovingObject::vehicle_extension has to be
 * filled if the \c MovingObject::Type is a vehicle.
 */
export interface MovingObject {
  /** The ID of the object. */
  id?:
    | Identifier
    | undefined;
  /**
   * The base parameters of the vehicle.
   *
   * \note The bounding box does NOT includes mirrors for vehicles.
   */
  base?:
    | BaseMoving
    | undefined;
  /** The type of the object. */
  type?:
    | MovingObject_Type
    | undefined;
  /**
   * The IDs of the lanes that this object is assigned to.
   *
   * \note Might be multiple if the object is switching lanes or moving from
   * one lane into another following lane.
   *
   * \note OSI uses singular instead of plural for repeated field names.
   */
  assigned_lane_id?:
    | Identifier[]
    | undefined;
  /**
   * Specific information about the vehicle.
   *
   * \note This field is mandatory if the \c #type is
   * #TYPE_VEHICLE .
   */
  vehicle_attributes?:
    | MovingObject_VehicleAttributes
    | undefined;
  /**
   * Specific information about the classification of the vehicle.
   *
   * \note This field is mandatory if the \c #type is
   * #TYPE_VEHICLE .
   */
  vehicle_classification?:
    | MovingObject_VehicleClassification
    | undefined;
  /**
   * Opaque reference of an associated 3D model of the moving object.
   *
   * \note It is implementation-specific how model_references are resolved to
   * 3d models.
   */
  model_reference?: string | undefined;
}

/** Definition of object types. */
export enum MovingObject_Type {
  /** UNKNOWN - Type of the object is unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) type of moving object. */
  OTHER = 1,
  /** VEHICLE - Object is a vehicle. */
  VEHICLE = 2,
  /** PEDESTRIAN - Object is a pedestrian. */
  PEDESTRIAN = 3,
  /** ANIMAL - Object is an animal. */
  ANIMAL = 4,
}

/**
 * \brief The vehicle attributes for \c MovingObject (host or other).
 *
 * This is an extension to the \c MovingObject with additional attributes,
 * such as type and lights. The origin of the rear (front) axis coordinate
 * system in world coordinates is calculated as:
 * \c MovingObject::base . \c BaseMoving::position + R * \c
 * MovingObject::VehicleAttributes::bbcenter_to_rear (front) for the host
 * vehicle (R rotates from vehicle to world frame, i.e. inverse orientation
 * of \c MovingObject::base . \c BaseMoving::orientation).
 *
 * For all vehicles, including host vehicles, the position given in
 *  \c MovingObject::base . \c BaseMoving::position points to the center of
 *  the vehicle's bounding box.
 *
 * The vehicle object coordinates are defined as x-axis is the direction
 * from rear to front of the vehicle, y-axis corresponds to rear axle and
 * z-axis points to vehicle ceiling [1]. The coordinate system is
 * right-handed. Therefore the positive y-axis points to the left of the
 * vehicle.
 *
 * \par References:
 * - [1] DIN ISO 8855:2013-11
 */
export interface MovingObject_VehicleAttributes {
  /**
   * The ID of the driver of the (host) vehicle.
   *
   * \note Field need not be set if host_vehicle is set to false or use
   * value for non valid id.
   */
  driver_id?:
    | Identifier
    | undefined;
  /**
   * Median radius of the wheels measured from a center of the wheel
   * including tire.
   *
   * Unit: [m]
   */
  radius_wheel?:
    | number
    | undefined;
  /**
   * Number of independent wheels.
   *
   * Unit: []
   */
  number_wheels?:
    | number
    | undefined;
  /**
   * The vector pointing from the bounding box center point (\c
   * MovingObject::base . \c BaseMoving::position) to the middle (in x, y
   * and z) of the rear axle under neutral load conditions. In object
   * coordinates.
   */
  bbcenter_to_rear?:
    | Vector3d
    | undefined;
  /**
   * The vector pointing from the bounding box center point (\c
   * MovingObject::base . \c BaseMoving::position) to the middle (in x, y
   * and z) of the front axle under neutral load conditions. In object
   * coordinates.
   */
  bbcenter_to_front?:
    | Vector3d
    | undefined;
  /**
   * Static minimal distance in [m] of under-body plane to ground
   * surface plane (i.e. disregarding driving dynamic effects or road
   * surface effects) under neutral load conditions. Can be useful to
   * approximate the clear area under a vehicle that a sensor can see
   * through.
   */
  ground_clearance?: number | undefined;
}

/**
 * \brief Information for the classification of vehicles regarding
 * \c MovingObject (host or other).
 */
export interface MovingObject_VehicleClassification {
  /** The type of the vehicle. */
  type?:
    | MovingObject_VehicleClassification_Type
    | undefined;
  /** The light state of the vehicle. */
  light_state?:
    | MovingObject_VehicleClassification_LightState
    | undefined;
  /** Flag defining whether the vehicle has an attached trailer. */
  has_trailer?:
    | boolean
    | undefined;
  /**
   * Id of the attached trailer.
   *
   * \note Field need not be set if has_Trailer is set to false or use
   * value for non valid id.
   */
  trailer_id?: Identifier | undefined;
}

/** Definition of vehicle types. */
export enum MovingObject_VehicleClassification_Type {
  /** UNKNOWN - Type of vehicle is unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) type of vehicle. */
  OTHER = 1,
  /**
   * SMALL_CAR - Vehicle is a small car.
   *
   * Definition: Hatchback car with maximum length 4 m.
   */
  SMALL_CAR = 2,
  /**
   * COMPACT_CAR - Vehicle is a compact car.
   *
   * Definition: Hatchback car with length between 4 and 4.5 m.
   */
  COMPACT_CAR = 3,
  /**
   * MEDIUM_CAR - Vehicle is a medium car.
   *
   * Definition: Hatchback or sedan with lenght between 4.5 and 5 m.
   */
  MEDIUM_CAR = 4,
  /**
   * LUXURY_CAR - Vehicle is a luxury  car.
   *
   * Definition: Sedan or coupe that is longer then 5 m.
   */
  LUXURY_CAR = 5,
  /**
   * DELIVERY_VAN - Vehicle is a delivery van.
   *
   * Definition: A delivery van.
   */
  DELIVERY_VAN = 6,
  /** HEAVY_TRUCK - Vehicle is a heavy truck. */
  HEAVY_TRUCK = 7,
  /** SEMITRAILER - Vehicle is a truck with semitrailer. */
  SEMITRAILER = 8,
  /** TRAILER - Vehicle is a trailer (possibly attached to another vehicle). */
  TRAILER = 9,
  /** MOTORBIKE - Vehicle is a motorbike or moped. */
  MOTORBIKE = 10,
  /** BICYCLE - Vehicle is a bicycle (without motor and specific lights). */
  BICYCLE = 11,
  /** BUS - Vehicle is a bus. */
  BUS = 12,
  /** TRAM - Vehicle is a tram. */
  TRAM = 13,
  /** TRAIN - Vehicle is a train. */
  TRAIN = 14,
  /** WHEELCHAIR - Vehicle is a wheelchair. */
  WHEELCHAIR = 15,
}

/** \brief The state of the lights of a vehicle. */
export interface MovingObject_VehicleClassification_LightState {
  /** State of the object's indicators. */
  indicator_state?:
    | MovingObject_VehicleClassification_LightState_IndicatorState
    | undefined;
  /** State of the front fog light. */
  front_fog_light?:
    | MovingObject_VehicleClassification_LightState_GenericLightState
    | undefined;
  /** State of the rear fog light. */
  rear_fog_light?:
    | MovingObject_VehicleClassification_LightState_GenericLightState
    | undefined;
  /** State of the head lights. */
  head_light?:
    | MovingObject_VehicleClassification_LightState_GenericLightState
    | undefined;
  /** State of the high beam. */
  high_beam?:
    | MovingObject_VehicleClassification_LightState_GenericLightState
    | undefined;
  /** State of the reversing light. */
  reversing_light?:
    | MovingObject_VehicleClassification_LightState_GenericLightState
    | undefined;
  /** State of the brake lights. */
  brake_light_state?:
    | MovingObject_VehicleClassification_LightState_BrakeLightState
    | undefined;
  /** State of the (rear) license plate illumination. */
  license_plate_illumination_rear?:
    | MovingObject_VehicleClassification_LightState_GenericLightState
    | undefined;
  /**
   * Lighting of emergency vehicles (ambulance, fire engine, police
   * car, etc.). Must be set only if a vehicle is allowed to use this
   * illumination type.
   */
  emergency_vehicle_illumination?:
    | MovingObject_VehicleClassification_LightState_GenericLightState
    | undefined;
  /**
   * Lighting of service vehicles (snow removal, garbage truck, towing
   * vehicle, slow or wide vehicle, etc.). Must be set only if a
   * vehicle is allowed to use this illumination type.
   */
  service_vehicle_illumination?: MovingObject_VehicleClassification_LightState_GenericLightState | undefined;
}

/** Definition of indicator states. */
export enum MovingObject_VehicleClassification_LightState_IndicatorState {
  /**
   * UNKNOWN - Indicator state is unknown (must not be used in ground
   * truth).
   */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) state of indicator. */
  OTHER = 1,
  /** OFF - Indicators are off. */
  OFF = 2,
  /** LEFT - Left indicator is on. */
  LEFT = 3,
  /** RIGHT - Right indicator is on. */
  RIGHT = 4,
  /** WARNING - Hazard/warning light, i.e. both indicators, are on. */
  WARNING = 5,
}

/**
 * Definition of generic light states for light that may be on or
 * off.
 */
export enum MovingObject_VehicleClassification_LightState_GenericLightState {
  /** UNKNOWN - Light state is unknown (must not be used in ground truth). */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) state of light. */
  OTHER = 1,
  /** OFF - Light is off. */
  OFF = 2,
  /** ON - Light is on. */
  ON = 3,
  /**
   * FLASHING_BLUE - Light is flashing blue.
   * To be used for emergency vehicles.
   */
  FLASHING_BLUE = 4,
  /**
   * FLASHING_BLUE_AND_RED - Light is flashing blue and red.
   * To be used for emergency vehicles.
   */
  FLASHING_BLUE_AND_RED = 5,
  /**
   * FLASHING_AMBER - Light is flashing amber.
   * To be used for service vehicles.
   */
  FLASHING_AMBER = 6,
}

/** Definition of brake light states. */
export enum MovingObject_VehicleClassification_LightState_BrakeLightState {
  /**
   * UNKNOWN - Brake light state is unknown (must not be used in ground
   * truth).
   */
  UNKNOWN = 0,
  /** OTHER - Other (unspecified but known) state of brake light. */
  OTHER = 1,
  /** OFF - Brake lights are off. */
  OFF = 2,
  /** NORMAL - Brake lights are on with normal intensity. */
  NORMAL = 3,
  /**
   * STRONG - Brake lights are on with extra bright intensity (indicating
   * stronger braking).
   */
  STRONG = 4,
}
